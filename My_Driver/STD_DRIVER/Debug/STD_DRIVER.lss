
STD_DRIVER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000274c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  0000274c  000027c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00002928  00000000  00000000  000027d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000f0d  00000000  00000000  00005100  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  0000600d  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  0000614d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  000062bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  00007f06  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  00008df1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  00009ba0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  00009d00  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  00009f8d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000a75b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e4       	ldi	r30, 0x4C	; 76
      68:	f7 e2       	ldi	r31, 0x27	; 39
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 37       	cpi	r26, 0x78	; 120
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 44 13 	call	0x2688	; 0x2688 <main>
      7a:	0c 94 a4 13 	jmp	0x2748	; 0x2748 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 6d 13 	jmp	0x26da	; 0x26da <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 89 13 	jmp	0x2712	; 0x2712 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 79 13 	jmp	0x26f2	; 0x26f2 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 95 13 	jmp	0x272a	; 0x272a <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 79 13 	jmp	0x26f2	; 0x26f2 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 95 13 	jmp	0x272a	; 0x272a <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 6d 13 	jmp	0x26da	; 0x26da <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__stack+0x2f>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__stack+0x45>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__stack+0x1d>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__stack+0x2f>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__stack+0x25>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__stack+0x2b>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__stack+0x45>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__stack+0x1b7>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__stack+0x41>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__stack+0x1b7>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__stack+0x57>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__stack+0x1b7>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__stack+0xc3>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__stack+0xb7>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__stack+0xdf>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__stack+0xf9>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__stack+0x7f>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__stack+0x13d>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__stack+0x131>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__stack+0x10f>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__stack+0x15b>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__stack+0x143>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__stack+0x19d>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__stack+0x19d>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__stack+0x19d>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__stack+0x1a7>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 89 13 	jmp	0x2712	; 0x2712 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 79 13 	jmp	0x26f2	; 0x26f2 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 95 13 	jmp	0x272a	; 0x272a <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 79 13 	jmp	0x26f2	; 0x26f2 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 95 13 	jmp	0x272a	; 0x272a <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 79 13 	jmp	0x26f2	; 0x26f2 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 95 13 	jmp	0x272a	; 0x272a <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 7d 13 	jmp	0x26fa	; 0x26fa <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 99 13 	jmp	0x2732	; 0x2732 <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__pack_f+0x178>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__pack_f+0x172>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__pack_f+0x17c>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__pack_f+0x114>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__pack_f+0x76>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__pack_f+0xca>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__pack_f+0x86>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__pack_f+0x7e>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__pack_f+0x9c>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__pack_f+0x94>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__pack_f+0xbe>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__pack_f+0xee>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__pack_f+0xf6>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__pack_f+0xf6>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__pack_f+0x10e>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__pack_f+0x162>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__pack_f+0x172>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__pack_f+0x144>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__pack_f+0x154>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__pack_f+0x14c>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__pack_f+0x162>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__pack_f+0x164>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__pack_f+0x17c>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <DIO_setPortDir>:
#include "DIO_interface.h"


/*********function of port************/
void DIO_setPortDir(u8 PORTID,u8 portDir)
{
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	00 d0       	rcall	.+0      	; 0xb3c <DIO_setPortDir+0x6>
     b3c:	00 d0       	rcall	.+0      	; 0xb3e <DIO_setPortDir+0x8>
     b3e:	cd b7       	in	r28, 0x3d	; 61
     b40:	de b7       	in	r29, 0x3e	; 62
     b42:	89 83       	std	Y+1, r24	; 0x01
     b44:	6a 83       	std	Y+2, r22	; 0x02
	switch(PORTID)
     b46:	89 81       	ldd	r24, Y+1	; 0x01
     b48:	28 2f       	mov	r18, r24
     b4a:	30 e0       	ldi	r19, 0x00	; 0
     b4c:	3c 83       	std	Y+4, r19	; 0x04
     b4e:	2b 83       	std	Y+3, r18	; 0x03
     b50:	8b 81       	ldd	r24, Y+3	; 0x03
     b52:	9c 81       	ldd	r25, Y+4	; 0x04
     b54:	81 30       	cpi	r24, 0x01	; 1
     b56:	91 05       	cpc	r25, r1
     b58:	d1 f0       	breq	.+52     	; 0xb8e <DIO_setPortDir+0x58>
     b5a:	2b 81       	ldd	r18, Y+3	; 0x03
     b5c:	3c 81       	ldd	r19, Y+4	; 0x04
     b5e:	22 30       	cpi	r18, 0x02	; 2
     b60:	31 05       	cpc	r19, r1
     b62:	2c f4       	brge	.+10     	; 0xb6e <DIO_setPortDir+0x38>
     b64:	8b 81       	ldd	r24, Y+3	; 0x03
     b66:	9c 81       	ldd	r25, Y+4	; 0x04
     b68:	00 97       	sbiw	r24, 0x00	; 0
     b6a:	61 f0       	breq	.+24     	; 0xb84 <DIO_setPortDir+0x4e>
     b6c:	1e c0       	rjmp	.+60     	; 0xbaa <DIO_setPortDir+0x74>
     b6e:	2b 81       	ldd	r18, Y+3	; 0x03
     b70:	3c 81       	ldd	r19, Y+4	; 0x04
     b72:	22 30       	cpi	r18, 0x02	; 2
     b74:	31 05       	cpc	r19, r1
     b76:	81 f0       	breq	.+32     	; 0xb98 <DIO_setPortDir+0x62>
     b78:	8b 81       	ldd	r24, Y+3	; 0x03
     b7a:	9c 81       	ldd	r25, Y+4	; 0x04
     b7c:	83 30       	cpi	r24, 0x03	; 3
     b7e:	91 05       	cpc	r25, r1
     b80:	81 f0       	breq	.+32     	; 0xba2 <DIO_setPortDir+0x6c>
     b82:	13 c0       	rjmp	.+38     	; 0xbaa <DIO_setPortDir+0x74>
	{
	case A: DDRA=portDir;
     b84:	ea e3       	ldi	r30, 0x3A	; 58
     b86:	f0 e0       	ldi	r31, 0x00	; 0
     b88:	8a 81       	ldd	r24, Y+2	; 0x02
     b8a:	80 83       	st	Z, r24
     b8c:	0e c0       	rjmp	.+28     	; 0xbaa <DIO_setPortDir+0x74>
		break;
	case B: DDRB=portDir;
     b8e:	e7 e3       	ldi	r30, 0x37	; 55
     b90:	f0 e0       	ldi	r31, 0x00	; 0
     b92:	8a 81       	ldd	r24, Y+2	; 0x02
     b94:	80 83       	st	Z, r24
     b96:	09 c0       	rjmp	.+18     	; 0xbaa <DIO_setPortDir+0x74>
		break;
	case C: DDRC=portDir;
     b98:	e4 e3       	ldi	r30, 0x34	; 52
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	8a 81       	ldd	r24, Y+2	; 0x02
     b9e:	80 83       	st	Z, r24
     ba0:	04 c0       	rjmp	.+8      	; 0xbaa <DIO_setPortDir+0x74>
		break;
	case D: DDRD=portDir;
     ba2:	e1 e3       	ldi	r30, 0x31	; 49
     ba4:	f0 e0       	ldi	r31, 0x00	; 0
     ba6:	8a 81       	ldd	r24, Y+2	; 0x02
     ba8:	80 83       	st	Z, r24
		break;
	default:/*do no thing*/
		break;
	}
}
     baa:	0f 90       	pop	r0
     bac:	0f 90       	pop	r0
     bae:	0f 90       	pop	r0
     bb0:	0f 90       	pop	r0
     bb2:	cf 91       	pop	r28
     bb4:	df 91       	pop	r29
     bb6:	08 95       	ret

00000bb8 <DIO_setPortval>:
void DIO_setPortval(u8 PORTID,u8 portval)
{
     bb8:	df 93       	push	r29
     bba:	cf 93       	push	r28
     bbc:	00 d0       	rcall	.+0      	; 0xbbe <DIO_setPortval+0x6>
     bbe:	00 d0       	rcall	.+0      	; 0xbc0 <DIO_setPortval+0x8>
     bc0:	cd b7       	in	r28, 0x3d	; 61
     bc2:	de b7       	in	r29, 0x3e	; 62
     bc4:	89 83       	std	Y+1, r24	; 0x01
     bc6:	6a 83       	std	Y+2, r22	; 0x02
	switch(PORTID)
     bc8:	89 81       	ldd	r24, Y+1	; 0x01
     bca:	28 2f       	mov	r18, r24
     bcc:	30 e0       	ldi	r19, 0x00	; 0
     bce:	3c 83       	std	Y+4, r19	; 0x04
     bd0:	2b 83       	std	Y+3, r18	; 0x03
     bd2:	8b 81       	ldd	r24, Y+3	; 0x03
     bd4:	9c 81       	ldd	r25, Y+4	; 0x04
     bd6:	81 30       	cpi	r24, 0x01	; 1
     bd8:	91 05       	cpc	r25, r1
     bda:	d1 f0       	breq	.+52     	; 0xc10 <DIO_setPortval+0x58>
     bdc:	2b 81       	ldd	r18, Y+3	; 0x03
     bde:	3c 81       	ldd	r19, Y+4	; 0x04
     be0:	22 30       	cpi	r18, 0x02	; 2
     be2:	31 05       	cpc	r19, r1
     be4:	2c f4       	brge	.+10     	; 0xbf0 <DIO_setPortval+0x38>
     be6:	8b 81       	ldd	r24, Y+3	; 0x03
     be8:	9c 81       	ldd	r25, Y+4	; 0x04
     bea:	00 97       	sbiw	r24, 0x00	; 0
     bec:	61 f0       	breq	.+24     	; 0xc06 <DIO_setPortval+0x4e>
     bee:	1e c0       	rjmp	.+60     	; 0xc2c <DIO_setPortval+0x74>
     bf0:	2b 81       	ldd	r18, Y+3	; 0x03
     bf2:	3c 81       	ldd	r19, Y+4	; 0x04
     bf4:	22 30       	cpi	r18, 0x02	; 2
     bf6:	31 05       	cpc	r19, r1
     bf8:	81 f0       	breq	.+32     	; 0xc1a <DIO_setPortval+0x62>
     bfa:	8b 81       	ldd	r24, Y+3	; 0x03
     bfc:	9c 81       	ldd	r25, Y+4	; 0x04
     bfe:	83 30       	cpi	r24, 0x03	; 3
     c00:	91 05       	cpc	r25, r1
     c02:	81 f0       	breq	.+32     	; 0xc24 <DIO_setPortval+0x6c>
     c04:	13 c0       	rjmp	.+38     	; 0xc2c <DIO_setPortval+0x74>
		{
		case A: PORTA=portval;
     c06:	eb e3       	ldi	r30, 0x3B	; 59
     c08:	f0 e0       	ldi	r31, 0x00	; 0
     c0a:	8a 81       	ldd	r24, Y+2	; 0x02
     c0c:	80 83       	st	Z, r24
     c0e:	0e c0       	rjmp	.+28     	; 0xc2c <DIO_setPortval+0x74>
			break;
		case B: PORTB=portval;
     c10:	e8 e3       	ldi	r30, 0x38	; 56
     c12:	f0 e0       	ldi	r31, 0x00	; 0
     c14:	8a 81       	ldd	r24, Y+2	; 0x02
     c16:	80 83       	st	Z, r24
     c18:	09 c0       	rjmp	.+18     	; 0xc2c <DIO_setPortval+0x74>
			break;
		case C: PORTC=portval;
     c1a:	e5 e3       	ldi	r30, 0x35	; 53
     c1c:	f0 e0       	ldi	r31, 0x00	; 0
     c1e:	8a 81       	ldd	r24, Y+2	; 0x02
     c20:	80 83       	st	Z, r24
     c22:	04 c0       	rjmp	.+8      	; 0xc2c <DIO_setPortval+0x74>
			break;
		case D: PORTD=portval;
     c24:	e2 e3       	ldi	r30, 0x32	; 50
     c26:	f0 e0       	ldi	r31, 0x00	; 0
     c28:	8a 81       	ldd	r24, Y+2	; 0x02
     c2a:	80 83       	st	Z, r24
			break;
		default:/*do no thing*/
			break;
		}
}
     c2c:	0f 90       	pop	r0
     c2e:	0f 90       	pop	r0
     c30:	0f 90       	pop	r0
     c32:	0f 90       	pop	r0
     c34:	cf 91       	pop	r28
     c36:	df 91       	pop	r29
     c38:	08 95       	ret

00000c3a <DIO_getPortval>:
u8 DIO_getPortval(u8 PORTID)
{
     c3a:	df 93       	push	r29
     c3c:	cf 93       	push	r28
     c3e:	00 d0       	rcall	.+0      	; 0xc40 <DIO_getPortval+0x6>
     c40:	00 d0       	rcall	.+0      	; 0xc42 <DIO_getPortval+0x8>
     c42:	cd b7       	in	r28, 0x3d	; 61
     c44:	de b7       	in	r29, 0x3e	; 62
     c46:	8a 83       	std	Y+2, r24	; 0x02
	u8 portval;
	switch(PORTID)
     c48:	8a 81       	ldd	r24, Y+2	; 0x02
     c4a:	28 2f       	mov	r18, r24
     c4c:	30 e0       	ldi	r19, 0x00	; 0
     c4e:	3c 83       	std	Y+4, r19	; 0x04
     c50:	2b 83       	std	Y+3, r18	; 0x03
     c52:	8b 81       	ldd	r24, Y+3	; 0x03
     c54:	9c 81       	ldd	r25, Y+4	; 0x04
     c56:	81 30       	cpi	r24, 0x01	; 1
     c58:	91 05       	cpc	r25, r1
     c5a:	d1 f0       	breq	.+52     	; 0xc90 <DIO_getPortval+0x56>
     c5c:	2b 81       	ldd	r18, Y+3	; 0x03
     c5e:	3c 81       	ldd	r19, Y+4	; 0x04
     c60:	22 30       	cpi	r18, 0x02	; 2
     c62:	31 05       	cpc	r19, r1
     c64:	2c f4       	brge	.+10     	; 0xc70 <DIO_getPortval+0x36>
     c66:	8b 81       	ldd	r24, Y+3	; 0x03
     c68:	9c 81       	ldd	r25, Y+4	; 0x04
     c6a:	00 97       	sbiw	r24, 0x00	; 0
     c6c:	61 f0       	breq	.+24     	; 0xc86 <DIO_getPortval+0x4c>
     c6e:	1e c0       	rjmp	.+60     	; 0xcac <DIO_getPortval+0x72>
     c70:	2b 81       	ldd	r18, Y+3	; 0x03
     c72:	3c 81       	ldd	r19, Y+4	; 0x04
     c74:	22 30       	cpi	r18, 0x02	; 2
     c76:	31 05       	cpc	r19, r1
     c78:	81 f0       	breq	.+32     	; 0xc9a <DIO_getPortval+0x60>
     c7a:	8b 81       	ldd	r24, Y+3	; 0x03
     c7c:	9c 81       	ldd	r25, Y+4	; 0x04
     c7e:	83 30       	cpi	r24, 0x03	; 3
     c80:	91 05       	cpc	r25, r1
     c82:	81 f0       	breq	.+32     	; 0xca4 <DIO_getPortval+0x6a>
     c84:	13 c0       	rjmp	.+38     	; 0xcac <DIO_getPortval+0x72>
			{
			case A: portval=PINA;
     c86:	e9 e3       	ldi	r30, 0x39	; 57
     c88:	f0 e0       	ldi	r31, 0x00	; 0
     c8a:	80 81       	ld	r24, Z
     c8c:	89 83       	std	Y+1, r24	; 0x01
     c8e:	0e c0       	rjmp	.+28     	; 0xcac <DIO_getPortval+0x72>
				break;
			case B: portval=PINB;
     c90:	e6 e3       	ldi	r30, 0x36	; 54
     c92:	f0 e0       	ldi	r31, 0x00	; 0
     c94:	80 81       	ld	r24, Z
     c96:	89 83       	std	Y+1, r24	; 0x01
     c98:	09 c0       	rjmp	.+18     	; 0xcac <DIO_getPortval+0x72>
				break;
			case C: portval=PINC;
     c9a:	e3 e3       	ldi	r30, 0x33	; 51
     c9c:	f0 e0       	ldi	r31, 0x00	; 0
     c9e:	80 81       	ld	r24, Z
     ca0:	89 83       	std	Y+1, r24	; 0x01
     ca2:	04 c0       	rjmp	.+8      	; 0xcac <DIO_getPortval+0x72>
				break;
			case D: portval=PIND;
     ca4:	e0 e3       	ldi	r30, 0x30	; 48
     ca6:	f0 e0       	ldi	r31, 0x00	; 0
     ca8:	80 81       	ld	r24, Z
     caa:	89 83       	std	Y+1, r24	; 0x01
				break;
			default:/*do no thing*/
				break;
			}
	return portval;
     cac:	89 81       	ldd	r24, Y+1	; 0x01
}
     cae:	0f 90       	pop	r0
     cb0:	0f 90       	pop	r0
     cb2:	0f 90       	pop	r0
     cb4:	0f 90       	pop	r0
     cb6:	cf 91       	pop	r28
     cb8:	df 91       	pop	r29
     cba:	08 95       	ret

00000cbc <DIO_setPinDir>:


/*********function of Pin************/
void DIO_setPinDir(u8 PORTID,u8 PINID,u8 Dir)
{
     cbc:	df 93       	push	r29
     cbe:	cf 93       	push	r28
     cc0:	cd b7       	in	r28, 0x3d	; 61
     cc2:	de b7       	in	r29, 0x3e	; 62
     cc4:	27 97       	sbiw	r28, 0x07	; 7
     cc6:	0f b6       	in	r0, 0x3f	; 63
     cc8:	f8 94       	cli
     cca:	de bf       	out	0x3e, r29	; 62
     ccc:	0f be       	out	0x3f, r0	; 63
     cce:	cd bf       	out	0x3d, r28	; 61
     cd0:	89 83       	std	Y+1, r24	; 0x01
     cd2:	6a 83       	std	Y+2, r22	; 0x02
     cd4:	4b 83       	std	Y+3, r20	; 0x03
	if(Dir == output)
     cd6:	8b 81       	ldd	r24, Y+3	; 0x03
     cd8:	81 30       	cpi	r24, 0x01	; 1
     cda:	09 f0       	breq	.+2      	; 0xcde <DIO_setPinDir+0x22>
     cdc:	6f c0       	rjmp	.+222    	; 0xdbc <DIO_setPinDir+0x100>
	{
		switch(PORTID)
     cde:	89 81       	ldd	r24, Y+1	; 0x01
     ce0:	28 2f       	mov	r18, r24
     ce2:	30 e0       	ldi	r19, 0x00	; 0
     ce4:	3f 83       	std	Y+7, r19	; 0x07
     ce6:	2e 83       	std	Y+6, r18	; 0x06
     ce8:	8e 81       	ldd	r24, Y+6	; 0x06
     cea:	9f 81       	ldd	r25, Y+7	; 0x07
     cec:	81 30       	cpi	r24, 0x01	; 1
     cee:	91 05       	cpc	r25, r1
     cf0:	49 f1       	breq	.+82     	; 0xd44 <DIO_setPinDir+0x88>
     cf2:	2e 81       	ldd	r18, Y+6	; 0x06
     cf4:	3f 81       	ldd	r19, Y+7	; 0x07
     cf6:	22 30       	cpi	r18, 0x02	; 2
     cf8:	31 05       	cpc	r19, r1
     cfa:	2c f4       	brge	.+10     	; 0xd06 <DIO_setPinDir+0x4a>
     cfc:	8e 81       	ldd	r24, Y+6	; 0x06
     cfe:	9f 81       	ldd	r25, Y+7	; 0x07
     d00:	00 97       	sbiw	r24, 0x00	; 0
     d02:	61 f0       	breq	.+24     	; 0xd1c <DIO_setPinDir+0x60>
     d04:	ce c0       	rjmp	.+412    	; 0xea2 <DIO_setPinDir+0x1e6>
     d06:	2e 81       	ldd	r18, Y+6	; 0x06
     d08:	3f 81       	ldd	r19, Y+7	; 0x07
     d0a:	22 30       	cpi	r18, 0x02	; 2
     d0c:	31 05       	cpc	r19, r1
     d0e:	71 f1       	breq	.+92     	; 0xd6c <DIO_setPinDir+0xb0>
     d10:	8e 81       	ldd	r24, Y+6	; 0x06
     d12:	9f 81       	ldd	r25, Y+7	; 0x07
     d14:	83 30       	cpi	r24, 0x03	; 3
     d16:	91 05       	cpc	r25, r1
     d18:	e9 f1       	breq	.+122    	; 0xd94 <DIO_setPinDir+0xd8>
     d1a:	c3 c0       	rjmp	.+390    	; 0xea2 <DIO_setPinDir+0x1e6>
				{
				case A: SET_BIT(DDRA, PINID);
     d1c:	aa e3       	ldi	r26, 0x3A	; 58
     d1e:	b0 e0       	ldi	r27, 0x00	; 0
     d20:	ea e3       	ldi	r30, 0x3A	; 58
     d22:	f0 e0       	ldi	r31, 0x00	; 0
     d24:	80 81       	ld	r24, Z
     d26:	48 2f       	mov	r20, r24
     d28:	8a 81       	ldd	r24, Y+2	; 0x02
     d2a:	28 2f       	mov	r18, r24
     d2c:	30 e0       	ldi	r19, 0x00	; 0
     d2e:	81 e0       	ldi	r24, 0x01	; 1
     d30:	90 e0       	ldi	r25, 0x00	; 0
     d32:	02 2e       	mov	r0, r18
     d34:	02 c0       	rjmp	.+4      	; 0xd3a <DIO_setPinDir+0x7e>
     d36:	88 0f       	add	r24, r24
     d38:	99 1f       	adc	r25, r25
     d3a:	0a 94       	dec	r0
     d3c:	e2 f7       	brpl	.-8      	; 0xd36 <DIO_setPinDir+0x7a>
     d3e:	84 2b       	or	r24, r20
     d40:	8c 93       	st	X, r24
     d42:	af c0       	rjmp	.+350    	; 0xea2 <DIO_setPinDir+0x1e6>
					break;
				case B: SET_BIT(DDRB, PINID);
     d44:	a7 e3       	ldi	r26, 0x37	; 55
     d46:	b0 e0       	ldi	r27, 0x00	; 0
     d48:	e7 e3       	ldi	r30, 0x37	; 55
     d4a:	f0 e0       	ldi	r31, 0x00	; 0
     d4c:	80 81       	ld	r24, Z
     d4e:	48 2f       	mov	r20, r24
     d50:	8a 81       	ldd	r24, Y+2	; 0x02
     d52:	28 2f       	mov	r18, r24
     d54:	30 e0       	ldi	r19, 0x00	; 0
     d56:	81 e0       	ldi	r24, 0x01	; 1
     d58:	90 e0       	ldi	r25, 0x00	; 0
     d5a:	02 2e       	mov	r0, r18
     d5c:	02 c0       	rjmp	.+4      	; 0xd62 <DIO_setPinDir+0xa6>
     d5e:	88 0f       	add	r24, r24
     d60:	99 1f       	adc	r25, r25
     d62:	0a 94       	dec	r0
     d64:	e2 f7       	brpl	.-8      	; 0xd5e <DIO_setPinDir+0xa2>
     d66:	84 2b       	or	r24, r20
     d68:	8c 93       	st	X, r24
     d6a:	9b c0       	rjmp	.+310    	; 0xea2 <DIO_setPinDir+0x1e6>
					break;
				case C: SET_BIT(DDRC, PINID);
     d6c:	a4 e3       	ldi	r26, 0x34	; 52
     d6e:	b0 e0       	ldi	r27, 0x00	; 0
     d70:	e4 e3       	ldi	r30, 0x34	; 52
     d72:	f0 e0       	ldi	r31, 0x00	; 0
     d74:	80 81       	ld	r24, Z
     d76:	48 2f       	mov	r20, r24
     d78:	8a 81       	ldd	r24, Y+2	; 0x02
     d7a:	28 2f       	mov	r18, r24
     d7c:	30 e0       	ldi	r19, 0x00	; 0
     d7e:	81 e0       	ldi	r24, 0x01	; 1
     d80:	90 e0       	ldi	r25, 0x00	; 0
     d82:	02 2e       	mov	r0, r18
     d84:	02 c0       	rjmp	.+4      	; 0xd8a <DIO_setPinDir+0xce>
     d86:	88 0f       	add	r24, r24
     d88:	99 1f       	adc	r25, r25
     d8a:	0a 94       	dec	r0
     d8c:	e2 f7       	brpl	.-8      	; 0xd86 <DIO_setPinDir+0xca>
     d8e:	84 2b       	or	r24, r20
     d90:	8c 93       	st	X, r24
     d92:	87 c0       	rjmp	.+270    	; 0xea2 <DIO_setPinDir+0x1e6>
					break;
				case D: SET_BIT(DDRD, PINID);
     d94:	a1 e3       	ldi	r26, 0x31	; 49
     d96:	b0 e0       	ldi	r27, 0x00	; 0
     d98:	e1 e3       	ldi	r30, 0x31	; 49
     d9a:	f0 e0       	ldi	r31, 0x00	; 0
     d9c:	80 81       	ld	r24, Z
     d9e:	48 2f       	mov	r20, r24
     da0:	8a 81       	ldd	r24, Y+2	; 0x02
     da2:	28 2f       	mov	r18, r24
     da4:	30 e0       	ldi	r19, 0x00	; 0
     da6:	81 e0       	ldi	r24, 0x01	; 1
     da8:	90 e0       	ldi	r25, 0x00	; 0
     daa:	02 2e       	mov	r0, r18
     dac:	02 c0       	rjmp	.+4      	; 0xdb2 <DIO_setPinDir+0xf6>
     dae:	88 0f       	add	r24, r24
     db0:	99 1f       	adc	r25, r25
     db2:	0a 94       	dec	r0
     db4:	e2 f7       	brpl	.-8      	; 0xdae <DIO_setPinDir+0xf2>
     db6:	84 2b       	or	r24, r20
     db8:	8c 93       	st	X, r24
     dba:	73 c0       	rjmp	.+230    	; 0xea2 <DIO_setPinDir+0x1e6>
					break;
				}
	}
	else
	{
		switch(PORTID)
     dbc:	89 81       	ldd	r24, Y+1	; 0x01
     dbe:	28 2f       	mov	r18, r24
     dc0:	30 e0       	ldi	r19, 0x00	; 0
     dc2:	3d 83       	std	Y+5, r19	; 0x05
     dc4:	2c 83       	std	Y+4, r18	; 0x04
     dc6:	8c 81       	ldd	r24, Y+4	; 0x04
     dc8:	9d 81       	ldd	r25, Y+5	; 0x05
     dca:	81 30       	cpi	r24, 0x01	; 1
     dcc:	91 05       	cpc	r25, r1
     dce:	59 f1       	breq	.+86     	; 0xe26 <DIO_setPinDir+0x16a>
     dd0:	2c 81       	ldd	r18, Y+4	; 0x04
     dd2:	3d 81       	ldd	r19, Y+5	; 0x05
     dd4:	22 30       	cpi	r18, 0x02	; 2
     dd6:	31 05       	cpc	r19, r1
     dd8:	2c f4       	brge	.+10     	; 0xde4 <DIO_setPinDir+0x128>
     dda:	8c 81       	ldd	r24, Y+4	; 0x04
     ddc:	9d 81       	ldd	r25, Y+5	; 0x05
     dde:	00 97       	sbiw	r24, 0x00	; 0
     de0:	69 f0       	breq	.+26     	; 0xdfc <DIO_setPinDir+0x140>
     de2:	5f c0       	rjmp	.+190    	; 0xea2 <DIO_setPinDir+0x1e6>
     de4:	2c 81       	ldd	r18, Y+4	; 0x04
     de6:	3d 81       	ldd	r19, Y+5	; 0x05
     de8:	22 30       	cpi	r18, 0x02	; 2
     dea:	31 05       	cpc	r19, r1
     dec:	89 f1       	breq	.+98     	; 0xe50 <DIO_setPinDir+0x194>
     dee:	8c 81       	ldd	r24, Y+4	; 0x04
     df0:	9d 81       	ldd	r25, Y+5	; 0x05
     df2:	83 30       	cpi	r24, 0x03	; 3
     df4:	91 05       	cpc	r25, r1
     df6:	09 f4       	brne	.+2      	; 0xdfa <DIO_setPinDir+0x13e>
     df8:	40 c0       	rjmp	.+128    	; 0xe7a <DIO_setPinDir+0x1be>
     dfa:	53 c0       	rjmp	.+166    	; 0xea2 <DIO_setPinDir+0x1e6>
			{
			case A : CLR_BIT(DDRA, PINID);
     dfc:	aa e3       	ldi	r26, 0x3A	; 58
     dfe:	b0 e0       	ldi	r27, 0x00	; 0
     e00:	ea e3       	ldi	r30, 0x3A	; 58
     e02:	f0 e0       	ldi	r31, 0x00	; 0
     e04:	80 81       	ld	r24, Z
     e06:	48 2f       	mov	r20, r24
     e08:	8a 81       	ldd	r24, Y+2	; 0x02
     e0a:	28 2f       	mov	r18, r24
     e0c:	30 e0       	ldi	r19, 0x00	; 0
     e0e:	81 e0       	ldi	r24, 0x01	; 1
     e10:	90 e0       	ldi	r25, 0x00	; 0
     e12:	02 2e       	mov	r0, r18
     e14:	02 c0       	rjmp	.+4      	; 0xe1a <DIO_setPinDir+0x15e>
     e16:	88 0f       	add	r24, r24
     e18:	99 1f       	adc	r25, r25
     e1a:	0a 94       	dec	r0
     e1c:	e2 f7       	brpl	.-8      	; 0xe16 <DIO_setPinDir+0x15a>
     e1e:	80 95       	com	r24
     e20:	84 23       	and	r24, r20
     e22:	8c 93       	st	X, r24
     e24:	3e c0       	rjmp	.+124    	; 0xea2 <DIO_setPinDir+0x1e6>
				break;
			case B: CLR_BIT(DDRB, PINID);
     e26:	a7 e3       	ldi	r26, 0x37	; 55
     e28:	b0 e0       	ldi	r27, 0x00	; 0
     e2a:	e7 e3       	ldi	r30, 0x37	; 55
     e2c:	f0 e0       	ldi	r31, 0x00	; 0
     e2e:	80 81       	ld	r24, Z
     e30:	48 2f       	mov	r20, r24
     e32:	8a 81       	ldd	r24, Y+2	; 0x02
     e34:	28 2f       	mov	r18, r24
     e36:	30 e0       	ldi	r19, 0x00	; 0
     e38:	81 e0       	ldi	r24, 0x01	; 1
     e3a:	90 e0       	ldi	r25, 0x00	; 0
     e3c:	02 2e       	mov	r0, r18
     e3e:	02 c0       	rjmp	.+4      	; 0xe44 <DIO_setPinDir+0x188>
     e40:	88 0f       	add	r24, r24
     e42:	99 1f       	adc	r25, r25
     e44:	0a 94       	dec	r0
     e46:	e2 f7       	brpl	.-8      	; 0xe40 <DIO_setPinDir+0x184>
     e48:	80 95       	com	r24
     e4a:	84 23       	and	r24, r20
     e4c:	8c 93       	st	X, r24
     e4e:	29 c0       	rjmp	.+82     	; 0xea2 <DIO_setPinDir+0x1e6>
				break;
			case C: CLR_BIT(DDRC, PINID);
     e50:	a4 e3       	ldi	r26, 0x34	; 52
     e52:	b0 e0       	ldi	r27, 0x00	; 0
     e54:	e4 e3       	ldi	r30, 0x34	; 52
     e56:	f0 e0       	ldi	r31, 0x00	; 0
     e58:	80 81       	ld	r24, Z
     e5a:	48 2f       	mov	r20, r24
     e5c:	8a 81       	ldd	r24, Y+2	; 0x02
     e5e:	28 2f       	mov	r18, r24
     e60:	30 e0       	ldi	r19, 0x00	; 0
     e62:	81 e0       	ldi	r24, 0x01	; 1
     e64:	90 e0       	ldi	r25, 0x00	; 0
     e66:	02 2e       	mov	r0, r18
     e68:	02 c0       	rjmp	.+4      	; 0xe6e <DIO_setPinDir+0x1b2>
     e6a:	88 0f       	add	r24, r24
     e6c:	99 1f       	adc	r25, r25
     e6e:	0a 94       	dec	r0
     e70:	e2 f7       	brpl	.-8      	; 0xe6a <DIO_setPinDir+0x1ae>
     e72:	80 95       	com	r24
     e74:	84 23       	and	r24, r20
     e76:	8c 93       	st	X, r24
     e78:	14 c0       	rjmp	.+40     	; 0xea2 <DIO_setPinDir+0x1e6>
				break;
			case D: CLR_BIT(DDRD, PINID);
     e7a:	a1 e3       	ldi	r26, 0x31	; 49
     e7c:	b0 e0       	ldi	r27, 0x00	; 0
     e7e:	e1 e3       	ldi	r30, 0x31	; 49
     e80:	f0 e0       	ldi	r31, 0x00	; 0
     e82:	80 81       	ld	r24, Z
     e84:	48 2f       	mov	r20, r24
     e86:	8a 81       	ldd	r24, Y+2	; 0x02
     e88:	28 2f       	mov	r18, r24
     e8a:	30 e0       	ldi	r19, 0x00	; 0
     e8c:	81 e0       	ldi	r24, 0x01	; 1
     e8e:	90 e0       	ldi	r25, 0x00	; 0
     e90:	02 2e       	mov	r0, r18
     e92:	02 c0       	rjmp	.+4      	; 0xe98 <DIO_setPinDir+0x1dc>
     e94:	88 0f       	add	r24, r24
     e96:	99 1f       	adc	r25, r25
     e98:	0a 94       	dec	r0
     e9a:	e2 f7       	brpl	.-8      	; 0xe94 <DIO_setPinDir+0x1d8>
     e9c:	80 95       	com	r24
     e9e:	84 23       	and	r24, r20
     ea0:	8c 93       	st	X, r24
				break;
			}

	}

}
     ea2:	27 96       	adiw	r28, 0x07	; 7
     ea4:	0f b6       	in	r0, 0x3f	; 63
     ea6:	f8 94       	cli
     ea8:	de bf       	out	0x3e, r29	; 62
     eaa:	0f be       	out	0x3f, r0	; 63
     eac:	cd bf       	out	0x3d, r28	; 61
     eae:	cf 91       	pop	r28
     eb0:	df 91       	pop	r29
     eb2:	08 95       	ret

00000eb4 <DIO_setPinval>:
void DIO_setPinval(u8 PORTID,u8 PINID,u8 pinval)
{
     eb4:	df 93       	push	r29
     eb6:	cf 93       	push	r28
     eb8:	cd b7       	in	r28, 0x3d	; 61
     eba:	de b7       	in	r29, 0x3e	; 62
     ebc:	27 97       	sbiw	r28, 0x07	; 7
     ebe:	0f b6       	in	r0, 0x3f	; 63
     ec0:	f8 94       	cli
     ec2:	de bf       	out	0x3e, r29	; 62
     ec4:	0f be       	out	0x3f, r0	; 63
     ec6:	cd bf       	out	0x3d, r28	; 61
     ec8:	89 83       	std	Y+1, r24	; 0x01
     eca:	6a 83       	std	Y+2, r22	; 0x02
     ecc:	4b 83       	std	Y+3, r20	; 0x03
	if(pinval == HIGH)
     ece:	8b 81       	ldd	r24, Y+3	; 0x03
     ed0:	81 30       	cpi	r24, 0x01	; 1
     ed2:	09 f0       	breq	.+2      	; 0xed6 <DIO_setPinval+0x22>
     ed4:	6f c0       	rjmp	.+222    	; 0xfb4 <DIO_setPinval+0x100>
		{
			switch(PORTID)
     ed6:	89 81       	ldd	r24, Y+1	; 0x01
     ed8:	28 2f       	mov	r18, r24
     eda:	30 e0       	ldi	r19, 0x00	; 0
     edc:	3f 83       	std	Y+7, r19	; 0x07
     ede:	2e 83       	std	Y+6, r18	; 0x06
     ee0:	8e 81       	ldd	r24, Y+6	; 0x06
     ee2:	9f 81       	ldd	r25, Y+7	; 0x07
     ee4:	81 30       	cpi	r24, 0x01	; 1
     ee6:	91 05       	cpc	r25, r1
     ee8:	49 f1       	breq	.+82     	; 0xf3c <DIO_setPinval+0x88>
     eea:	2e 81       	ldd	r18, Y+6	; 0x06
     eec:	3f 81       	ldd	r19, Y+7	; 0x07
     eee:	22 30       	cpi	r18, 0x02	; 2
     ef0:	31 05       	cpc	r19, r1
     ef2:	2c f4       	brge	.+10     	; 0xefe <DIO_setPinval+0x4a>
     ef4:	8e 81       	ldd	r24, Y+6	; 0x06
     ef6:	9f 81       	ldd	r25, Y+7	; 0x07
     ef8:	00 97       	sbiw	r24, 0x00	; 0
     efa:	61 f0       	breq	.+24     	; 0xf14 <DIO_setPinval+0x60>
     efc:	d2 c0       	rjmp	.+420    	; 0x10a2 <DIO_setPinval+0x1ee>
     efe:	2e 81       	ldd	r18, Y+6	; 0x06
     f00:	3f 81       	ldd	r19, Y+7	; 0x07
     f02:	22 30       	cpi	r18, 0x02	; 2
     f04:	31 05       	cpc	r19, r1
     f06:	71 f1       	breq	.+92     	; 0xf64 <DIO_setPinval+0xb0>
     f08:	8e 81       	ldd	r24, Y+6	; 0x06
     f0a:	9f 81       	ldd	r25, Y+7	; 0x07
     f0c:	83 30       	cpi	r24, 0x03	; 3
     f0e:	91 05       	cpc	r25, r1
     f10:	e9 f1       	breq	.+122    	; 0xf8c <DIO_setPinval+0xd8>
     f12:	c7 c0       	rjmp	.+398    	; 0x10a2 <DIO_setPinval+0x1ee>
					{
					case A: SET_BIT(PORTA, PINID);
     f14:	ab e3       	ldi	r26, 0x3B	; 59
     f16:	b0 e0       	ldi	r27, 0x00	; 0
     f18:	eb e3       	ldi	r30, 0x3B	; 59
     f1a:	f0 e0       	ldi	r31, 0x00	; 0
     f1c:	80 81       	ld	r24, Z
     f1e:	48 2f       	mov	r20, r24
     f20:	8a 81       	ldd	r24, Y+2	; 0x02
     f22:	28 2f       	mov	r18, r24
     f24:	30 e0       	ldi	r19, 0x00	; 0
     f26:	81 e0       	ldi	r24, 0x01	; 1
     f28:	90 e0       	ldi	r25, 0x00	; 0
     f2a:	02 2e       	mov	r0, r18
     f2c:	02 c0       	rjmp	.+4      	; 0xf32 <DIO_setPinval+0x7e>
     f2e:	88 0f       	add	r24, r24
     f30:	99 1f       	adc	r25, r25
     f32:	0a 94       	dec	r0
     f34:	e2 f7       	brpl	.-8      	; 0xf2e <DIO_setPinval+0x7a>
     f36:	84 2b       	or	r24, r20
     f38:	8c 93       	st	X, r24
     f3a:	b3 c0       	rjmp	.+358    	; 0x10a2 <DIO_setPinval+0x1ee>
						break;
					case B: SET_BIT(PORTB, PINID);
     f3c:	a8 e3       	ldi	r26, 0x38	; 56
     f3e:	b0 e0       	ldi	r27, 0x00	; 0
     f40:	e8 e3       	ldi	r30, 0x38	; 56
     f42:	f0 e0       	ldi	r31, 0x00	; 0
     f44:	80 81       	ld	r24, Z
     f46:	48 2f       	mov	r20, r24
     f48:	8a 81       	ldd	r24, Y+2	; 0x02
     f4a:	28 2f       	mov	r18, r24
     f4c:	30 e0       	ldi	r19, 0x00	; 0
     f4e:	81 e0       	ldi	r24, 0x01	; 1
     f50:	90 e0       	ldi	r25, 0x00	; 0
     f52:	02 2e       	mov	r0, r18
     f54:	02 c0       	rjmp	.+4      	; 0xf5a <DIO_setPinval+0xa6>
     f56:	88 0f       	add	r24, r24
     f58:	99 1f       	adc	r25, r25
     f5a:	0a 94       	dec	r0
     f5c:	e2 f7       	brpl	.-8      	; 0xf56 <DIO_setPinval+0xa2>
     f5e:	84 2b       	or	r24, r20
     f60:	8c 93       	st	X, r24
     f62:	9f c0       	rjmp	.+318    	; 0x10a2 <DIO_setPinval+0x1ee>
						break;
					case C: SET_BIT(PORTC, PINID);
     f64:	a5 e3       	ldi	r26, 0x35	; 53
     f66:	b0 e0       	ldi	r27, 0x00	; 0
     f68:	e5 e3       	ldi	r30, 0x35	; 53
     f6a:	f0 e0       	ldi	r31, 0x00	; 0
     f6c:	80 81       	ld	r24, Z
     f6e:	48 2f       	mov	r20, r24
     f70:	8a 81       	ldd	r24, Y+2	; 0x02
     f72:	28 2f       	mov	r18, r24
     f74:	30 e0       	ldi	r19, 0x00	; 0
     f76:	81 e0       	ldi	r24, 0x01	; 1
     f78:	90 e0       	ldi	r25, 0x00	; 0
     f7a:	02 2e       	mov	r0, r18
     f7c:	02 c0       	rjmp	.+4      	; 0xf82 <DIO_setPinval+0xce>
     f7e:	88 0f       	add	r24, r24
     f80:	99 1f       	adc	r25, r25
     f82:	0a 94       	dec	r0
     f84:	e2 f7       	brpl	.-8      	; 0xf7e <DIO_setPinval+0xca>
     f86:	84 2b       	or	r24, r20
     f88:	8c 93       	st	X, r24
     f8a:	8b c0       	rjmp	.+278    	; 0x10a2 <DIO_setPinval+0x1ee>
						break;
					case D: SET_BIT(PORTD, PINID);
     f8c:	a2 e3       	ldi	r26, 0x32	; 50
     f8e:	b0 e0       	ldi	r27, 0x00	; 0
     f90:	e2 e3       	ldi	r30, 0x32	; 50
     f92:	f0 e0       	ldi	r31, 0x00	; 0
     f94:	80 81       	ld	r24, Z
     f96:	48 2f       	mov	r20, r24
     f98:	8a 81       	ldd	r24, Y+2	; 0x02
     f9a:	28 2f       	mov	r18, r24
     f9c:	30 e0       	ldi	r19, 0x00	; 0
     f9e:	81 e0       	ldi	r24, 0x01	; 1
     fa0:	90 e0       	ldi	r25, 0x00	; 0
     fa2:	02 2e       	mov	r0, r18
     fa4:	02 c0       	rjmp	.+4      	; 0xfaa <DIO_setPinval+0xf6>
     fa6:	88 0f       	add	r24, r24
     fa8:	99 1f       	adc	r25, r25
     faa:	0a 94       	dec	r0
     fac:	e2 f7       	brpl	.-8      	; 0xfa6 <DIO_setPinval+0xf2>
     fae:	84 2b       	or	r24, r20
     fb0:	8c 93       	st	X, r24
     fb2:	77 c0       	rjmp	.+238    	; 0x10a2 <DIO_setPinval+0x1ee>
						break;
					default:/*do no thing*/
						break;
					}
		}
	else if(pinval == LOW)
     fb4:	8b 81       	ldd	r24, Y+3	; 0x03
     fb6:	88 23       	and	r24, r24
     fb8:	09 f0       	breq	.+2      	; 0xfbc <DIO_setPinval+0x108>
     fba:	73 c0       	rjmp	.+230    	; 0x10a2 <DIO_setPinval+0x1ee>
		{
			switch(PORTID)
     fbc:	89 81       	ldd	r24, Y+1	; 0x01
     fbe:	28 2f       	mov	r18, r24
     fc0:	30 e0       	ldi	r19, 0x00	; 0
     fc2:	3d 83       	std	Y+5, r19	; 0x05
     fc4:	2c 83       	std	Y+4, r18	; 0x04
     fc6:	8c 81       	ldd	r24, Y+4	; 0x04
     fc8:	9d 81       	ldd	r25, Y+5	; 0x05
     fca:	81 30       	cpi	r24, 0x01	; 1
     fcc:	91 05       	cpc	r25, r1
     fce:	59 f1       	breq	.+86     	; 0x1026 <DIO_setPinval+0x172>
     fd0:	2c 81       	ldd	r18, Y+4	; 0x04
     fd2:	3d 81       	ldd	r19, Y+5	; 0x05
     fd4:	22 30       	cpi	r18, 0x02	; 2
     fd6:	31 05       	cpc	r19, r1
     fd8:	2c f4       	brge	.+10     	; 0xfe4 <DIO_setPinval+0x130>
     fda:	8c 81       	ldd	r24, Y+4	; 0x04
     fdc:	9d 81       	ldd	r25, Y+5	; 0x05
     fde:	00 97       	sbiw	r24, 0x00	; 0
     fe0:	69 f0       	breq	.+26     	; 0xffc <DIO_setPinval+0x148>
     fe2:	5f c0       	rjmp	.+190    	; 0x10a2 <DIO_setPinval+0x1ee>
     fe4:	2c 81       	ldd	r18, Y+4	; 0x04
     fe6:	3d 81       	ldd	r19, Y+5	; 0x05
     fe8:	22 30       	cpi	r18, 0x02	; 2
     fea:	31 05       	cpc	r19, r1
     fec:	89 f1       	breq	.+98     	; 0x1050 <DIO_setPinval+0x19c>
     fee:	8c 81       	ldd	r24, Y+4	; 0x04
     ff0:	9d 81       	ldd	r25, Y+5	; 0x05
     ff2:	83 30       	cpi	r24, 0x03	; 3
     ff4:	91 05       	cpc	r25, r1
     ff6:	09 f4       	brne	.+2      	; 0xffa <DIO_setPinval+0x146>
     ff8:	40 c0       	rjmp	.+128    	; 0x107a <DIO_setPinval+0x1c6>
     ffa:	53 c0       	rjmp	.+166    	; 0x10a2 <DIO_setPinval+0x1ee>
				{
			case A : CLR_BIT(PORTA, PINID);
     ffc:	ab e3       	ldi	r26, 0x3B	; 59
     ffe:	b0 e0       	ldi	r27, 0x00	; 0
    1000:	eb e3       	ldi	r30, 0x3B	; 59
    1002:	f0 e0       	ldi	r31, 0x00	; 0
    1004:	80 81       	ld	r24, Z
    1006:	48 2f       	mov	r20, r24
    1008:	8a 81       	ldd	r24, Y+2	; 0x02
    100a:	28 2f       	mov	r18, r24
    100c:	30 e0       	ldi	r19, 0x00	; 0
    100e:	81 e0       	ldi	r24, 0x01	; 1
    1010:	90 e0       	ldi	r25, 0x00	; 0
    1012:	02 2e       	mov	r0, r18
    1014:	02 c0       	rjmp	.+4      	; 0x101a <DIO_setPinval+0x166>
    1016:	88 0f       	add	r24, r24
    1018:	99 1f       	adc	r25, r25
    101a:	0a 94       	dec	r0
    101c:	e2 f7       	brpl	.-8      	; 0x1016 <DIO_setPinval+0x162>
    101e:	80 95       	com	r24
    1020:	84 23       	and	r24, r20
    1022:	8c 93       	st	X, r24
    1024:	3e c0       	rjmp	.+124    	; 0x10a2 <DIO_setPinval+0x1ee>
				break;
			case B: CLR_BIT(PORTB, PINID);
    1026:	a8 e3       	ldi	r26, 0x38	; 56
    1028:	b0 e0       	ldi	r27, 0x00	; 0
    102a:	e8 e3       	ldi	r30, 0x38	; 56
    102c:	f0 e0       	ldi	r31, 0x00	; 0
    102e:	80 81       	ld	r24, Z
    1030:	48 2f       	mov	r20, r24
    1032:	8a 81       	ldd	r24, Y+2	; 0x02
    1034:	28 2f       	mov	r18, r24
    1036:	30 e0       	ldi	r19, 0x00	; 0
    1038:	81 e0       	ldi	r24, 0x01	; 1
    103a:	90 e0       	ldi	r25, 0x00	; 0
    103c:	02 2e       	mov	r0, r18
    103e:	02 c0       	rjmp	.+4      	; 0x1044 <DIO_setPinval+0x190>
    1040:	88 0f       	add	r24, r24
    1042:	99 1f       	adc	r25, r25
    1044:	0a 94       	dec	r0
    1046:	e2 f7       	brpl	.-8      	; 0x1040 <DIO_setPinval+0x18c>
    1048:	80 95       	com	r24
    104a:	84 23       	and	r24, r20
    104c:	8c 93       	st	X, r24
    104e:	29 c0       	rjmp	.+82     	; 0x10a2 <DIO_setPinval+0x1ee>
				break;
			case C: CLR_BIT(PORTC, PINID);
    1050:	a5 e3       	ldi	r26, 0x35	; 53
    1052:	b0 e0       	ldi	r27, 0x00	; 0
    1054:	e5 e3       	ldi	r30, 0x35	; 53
    1056:	f0 e0       	ldi	r31, 0x00	; 0
    1058:	80 81       	ld	r24, Z
    105a:	48 2f       	mov	r20, r24
    105c:	8a 81       	ldd	r24, Y+2	; 0x02
    105e:	28 2f       	mov	r18, r24
    1060:	30 e0       	ldi	r19, 0x00	; 0
    1062:	81 e0       	ldi	r24, 0x01	; 1
    1064:	90 e0       	ldi	r25, 0x00	; 0
    1066:	02 2e       	mov	r0, r18
    1068:	02 c0       	rjmp	.+4      	; 0x106e <DIO_setPinval+0x1ba>
    106a:	88 0f       	add	r24, r24
    106c:	99 1f       	adc	r25, r25
    106e:	0a 94       	dec	r0
    1070:	e2 f7       	brpl	.-8      	; 0x106a <DIO_setPinval+0x1b6>
    1072:	80 95       	com	r24
    1074:	84 23       	and	r24, r20
    1076:	8c 93       	st	X, r24
    1078:	14 c0       	rjmp	.+40     	; 0x10a2 <DIO_setPinval+0x1ee>
				break;
			case D: CLR_BIT(PORTD, PINID);
    107a:	a2 e3       	ldi	r26, 0x32	; 50
    107c:	b0 e0       	ldi	r27, 0x00	; 0
    107e:	e2 e3       	ldi	r30, 0x32	; 50
    1080:	f0 e0       	ldi	r31, 0x00	; 0
    1082:	80 81       	ld	r24, Z
    1084:	48 2f       	mov	r20, r24
    1086:	8a 81       	ldd	r24, Y+2	; 0x02
    1088:	28 2f       	mov	r18, r24
    108a:	30 e0       	ldi	r19, 0x00	; 0
    108c:	81 e0       	ldi	r24, 0x01	; 1
    108e:	90 e0       	ldi	r25, 0x00	; 0
    1090:	02 2e       	mov	r0, r18
    1092:	02 c0       	rjmp	.+4      	; 0x1098 <DIO_setPinval+0x1e4>
    1094:	88 0f       	add	r24, r24
    1096:	99 1f       	adc	r25, r25
    1098:	0a 94       	dec	r0
    109a:	e2 f7       	brpl	.-8      	; 0x1094 <DIO_setPinval+0x1e0>
    109c:	80 95       	com	r24
    109e:	84 23       	and	r24, r20
    10a0:	8c 93       	st	X, r24
		}
	else
	{

	}
}
    10a2:	27 96       	adiw	r28, 0x07	; 7
    10a4:	0f b6       	in	r0, 0x3f	; 63
    10a6:	f8 94       	cli
    10a8:	de bf       	out	0x3e, r29	; 62
    10aa:	0f be       	out	0x3f, r0	; 63
    10ac:	cd bf       	out	0x3d, r28	; 61
    10ae:	cf 91       	pop	r28
    10b0:	df 91       	pop	r29
    10b2:	08 95       	ret

000010b4 <DIO_getPinval>:
u8 DIO_getPinval(u8 PORTID,u8 PINID)
{
    10b4:	df 93       	push	r29
    10b6:	cf 93       	push	r28
    10b8:	00 d0       	rcall	.+0      	; 0x10ba <DIO_getPinval+0x6>
    10ba:	00 d0       	rcall	.+0      	; 0x10bc <DIO_getPinval+0x8>
    10bc:	0f 92       	push	r0
    10be:	cd b7       	in	r28, 0x3d	; 61
    10c0:	de b7       	in	r29, 0x3e	; 62
    10c2:	8a 83       	std	Y+2, r24	; 0x02
    10c4:	6b 83       	std	Y+3, r22	; 0x03
	u8 pinval;
	switch(PORTID)
    10c6:	8a 81       	ldd	r24, Y+2	; 0x02
    10c8:	28 2f       	mov	r18, r24
    10ca:	30 e0       	ldi	r19, 0x00	; 0
    10cc:	3d 83       	std	Y+5, r19	; 0x05
    10ce:	2c 83       	std	Y+4, r18	; 0x04
    10d0:	4c 81       	ldd	r20, Y+4	; 0x04
    10d2:	5d 81       	ldd	r21, Y+5	; 0x05
    10d4:	41 30       	cpi	r20, 0x01	; 1
    10d6:	51 05       	cpc	r21, r1
    10d8:	41 f1       	breq	.+80     	; 0x112a <DIO_getPinval+0x76>
    10da:	8c 81       	ldd	r24, Y+4	; 0x04
    10dc:	9d 81       	ldd	r25, Y+5	; 0x05
    10de:	82 30       	cpi	r24, 0x02	; 2
    10e0:	91 05       	cpc	r25, r1
    10e2:	34 f4       	brge	.+12     	; 0x10f0 <DIO_getPinval+0x3c>
    10e4:	2c 81       	ldd	r18, Y+4	; 0x04
    10e6:	3d 81       	ldd	r19, Y+5	; 0x05
    10e8:	21 15       	cp	r18, r1
    10ea:	31 05       	cpc	r19, r1
    10ec:	61 f0       	breq	.+24     	; 0x1106 <DIO_getPinval+0x52>
    10ee:	52 c0       	rjmp	.+164    	; 0x1194 <DIO_getPinval+0xe0>
    10f0:	4c 81       	ldd	r20, Y+4	; 0x04
    10f2:	5d 81       	ldd	r21, Y+5	; 0x05
    10f4:	42 30       	cpi	r20, 0x02	; 2
    10f6:	51 05       	cpc	r21, r1
    10f8:	51 f1       	breq	.+84     	; 0x114e <DIO_getPinval+0x9a>
    10fa:	8c 81       	ldd	r24, Y+4	; 0x04
    10fc:	9d 81       	ldd	r25, Y+5	; 0x05
    10fe:	83 30       	cpi	r24, 0x03	; 3
    1100:	91 05       	cpc	r25, r1
    1102:	b9 f1       	breq	.+110    	; 0x1172 <DIO_getPinval+0xbe>
    1104:	47 c0       	rjmp	.+142    	; 0x1194 <DIO_getPinval+0xe0>
	{
	case A: pinval=GET_BIT(PINA, PINID);
    1106:	e9 e3       	ldi	r30, 0x39	; 57
    1108:	f0 e0       	ldi	r31, 0x00	; 0
    110a:	80 81       	ld	r24, Z
    110c:	28 2f       	mov	r18, r24
    110e:	30 e0       	ldi	r19, 0x00	; 0
    1110:	8b 81       	ldd	r24, Y+3	; 0x03
    1112:	88 2f       	mov	r24, r24
    1114:	90 e0       	ldi	r25, 0x00	; 0
    1116:	a9 01       	movw	r20, r18
    1118:	02 c0       	rjmp	.+4      	; 0x111e <DIO_getPinval+0x6a>
    111a:	55 95       	asr	r21
    111c:	47 95       	ror	r20
    111e:	8a 95       	dec	r24
    1120:	e2 f7       	brpl	.-8      	; 0x111a <DIO_getPinval+0x66>
    1122:	ca 01       	movw	r24, r20
    1124:	81 70       	andi	r24, 0x01	; 1
    1126:	89 83       	std	Y+1, r24	; 0x01
    1128:	35 c0       	rjmp	.+106    	; 0x1194 <DIO_getPinval+0xe0>
		break;
	case B: pinval=GET_BIT(PINB, PINID);
    112a:	e6 e3       	ldi	r30, 0x36	; 54
    112c:	f0 e0       	ldi	r31, 0x00	; 0
    112e:	80 81       	ld	r24, Z
    1130:	28 2f       	mov	r18, r24
    1132:	30 e0       	ldi	r19, 0x00	; 0
    1134:	8b 81       	ldd	r24, Y+3	; 0x03
    1136:	88 2f       	mov	r24, r24
    1138:	90 e0       	ldi	r25, 0x00	; 0
    113a:	a9 01       	movw	r20, r18
    113c:	02 c0       	rjmp	.+4      	; 0x1142 <DIO_getPinval+0x8e>
    113e:	55 95       	asr	r21
    1140:	47 95       	ror	r20
    1142:	8a 95       	dec	r24
    1144:	e2 f7       	brpl	.-8      	; 0x113e <DIO_getPinval+0x8a>
    1146:	ca 01       	movw	r24, r20
    1148:	81 70       	andi	r24, 0x01	; 1
    114a:	89 83       	std	Y+1, r24	; 0x01
    114c:	23 c0       	rjmp	.+70     	; 0x1194 <DIO_getPinval+0xe0>
		break;
	case C: pinval=GET_BIT(PINC, PINID);
    114e:	e3 e3       	ldi	r30, 0x33	; 51
    1150:	f0 e0       	ldi	r31, 0x00	; 0
    1152:	80 81       	ld	r24, Z
    1154:	28 2f       	mov	r18, r24
    1156:	30 e0       	ldi	r19, 0x00	; 0
    1158:	8b 81       	ldd	r24, Y+3	; 0x03
    115a:	88 2f       	mov	r24, r24
    115c:	90 e0       	ldi	r25, 0x00	; 0
    115e:	a9 01       	movw	r20, r18
    1160:	02 c0       	rjmp	.+4      	; 0x1166 <DIO_getPinval+0xb2>
    1162:	55 95       	asr	r21
    1164:	47 95       	ror	r20
    1166:	8a 95       	dec	r24
    1168:	e2 f7       	brpl	.-8      	; 0x1162 <DIO_getPinval+0xae>
    116a:	ca 01       	movw	r24, r20
    116c:	81 70       	andi	r24, 0x01	; 1
    116e:	89 83       	std	Y+1, r24	; 0x01
    1170:	11 c0       	rjmp	.+34     	; 0x1194 <DIO_getPinval+0xe0>
		break;
	case D: pinval=GET_BIT(PIND, PINID);
    1172:	e0 e3       	ldi	r30, 0x30	; 48
    1174:	f0 e0       	ldi	r31, 0x00	; 0
    1176:	80 81       	ld	r24, Z
    1178:	28 2f       	mov	r18, r24
    117a:	30 e0       	ldi	r19, 0x00	; 0
    117c:	8b 81       	ldd	r24, Y+3	; 0x03
    117e:	88 2f       	mov	r24, r24
    1180:	90 e0       	ldi	r25, 0x00	; 0
    1182:	a9 01       	movw	r20, r18
    1184:	02 c0       	rjmp	.+4      	; 0x118a <DIO_getPinval+0xd6>
    1186:	55 95       	asr	r21
    1188:	47 95       	ror	r20
    118a:	8a 95       	dec	r24
    118c:	e2 f7       	brpl	.-8      	; 0x1186 <DIO_getPinval+0xd2>
    118e:	ca 01       	movw	r24, r20
    1190:	81 70       	andi	r24, 0x01	; 1
    1192:	89 83       	std	Y+1, r24	; 0x01
		break;
	default:/*do no thing*/
		break;
	}
	return pinval;
    1194:	89 81       	ldd	r24, Y+1	; 0x01
}
    1196:	0f 90       	pop	r0
    1198:	0f 90       	pop	r0
    119a:	0f 90       	pop	r0
    119c:	0f 90       	pop	r0
    119e:	0f 90       	pop	r0
    11a0:	cf 91       	pop	r28
    11a2:	df 91       	pop	r29
    11a4:	08 95       	ret

000011a6 <DIO_pullup_Port>:

/*******************activate pullup resistor  **********************/
void DIO_pullup_Port(u8 PORTID)
{
    11a6:	df 93       	push	r29
    11a8:	cf 93       	push	r28
    11aa:	0f 92       	push	r0
    11ac:	cd b7       	in	r28, 0x3d	; 61
    11ae:	de b7       	in	r29, 0x3e	; 62
    11b0:	89 83       	std	Y+1, r24	; 0x01
	DIO_setPortDir(PORTID, outport);
    11b2:	89 81       	ldd	r24, Y+1	; 0x01
    11b4:	6f ef       	ldi	r22, 0xFF	; 255
    11b6:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_setPortDir>
	DIO_setPortval(PORTID, portHIGH);
    11ba:	89 81       	ldd	r24, Y+1	; 0x01
    11bc:	6f ef       	ldi	r22, 0xFF	; 255
    11be:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <DIO_setPortval>
}
    11c2:	0f 90       	pop	r0
    11c4:	cf 91       	pop	r28
    11c6:	df 91       	pop	r29
    11c8:	08 95       	ret

000011ca <DIO_pullup_PIN>:
void DIO_pullup_PIN(u8 PORTID,u8 PINID)
{
    11ca:	df 93       	push	r29
    11cc:	cf 93       	push	r28
    11ce:	00 d0       	rcall	.+0      	; 0x11d0 <DIO_pullup_PIN+0x6>
    11d0:	cd b7       	in	r28, 0x3d	; 61
    11d2:	de b7       	in	r29, 0x3e	; 62
    11d4:	89 83       	std	Y+1, r24	; 0x01
    11d6:	6a 83       	std	Y+2, r22	; 0x02
	DIO_setPinDir(PORTID,PINID, outport);
    11d8:	89 81       	ldd	r24, Y+1	; 0x01
    11da:	6a 81       	ldd	r22, Y+2	; 0x02
    11dc:	4f ef       	ldi	r20, 0xFF	; 255
    11de:	0e 94 5e 06 	call	0xcbc	; 0xcbc <DIO_setPinDir>
	DIO_setPinval(PORTID,PINID, portHIGH);
    11e2:	89 81       	ldd	r24, Y+1	; 0x01
    11e4:	6a 81       	ldd	r22, Y+2	; 0x02
    11e6:	4f ef       	ldi	r20, 0xFF	; 255
    11e8:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <DIO_setPinval>
}
    11ec:	0f 90       	pop	r0
    11ee:	0f 90       	pop	r0
    11f0:	cf 91       	pop	r28
    11f2:	df 91       	pop	r29
    11f4:	08 95       	ret

000011f6 <Seven_segment_enable>:

#include "Seven_Segment.h"
#include "../../MCAL/MCAL_DIO/DIO_interface.h"
/*******************disable 7_segment*********************/
void Seven_segment_enable(u8 Segment)
{
    11f6:	df 93       	push	r29
    11f8:	cf 93       	push	r28
    11fa:	0f 92       	push	r0
    11fc:	cd b7       	in	r28, 0x3d	; 61
    11fe:	de b7       	in	r29, 0x3e	; 62
    1200:	89 83       	std	Y+1, r24	; 0x01
	if (Segment == tens)
    1202:	89 81       	ldd	r24, Y+1	; 0x01
    1204:	81 30       	cpi	r24, 0x01	; 1
    1206:	59 f4       	brne	.+22     	; 0x121e <Seven_segment_enable+0x28>
	{
		DIO_setPinDir(B, PIN2, output);
    1208:	81 e0       	ldi	r24, 0x01	; 1
    120a:	62 e0       	ldi	r22, 0x02	; 2
    120c:	41 e0       	ldi	r20, 0x01	; 1
    120e:	0e 94 5e 06 	call	0xcbc	; 0xcbc <DIO_setPinDir>
		DIO_setPinval(B, PIN2, HIGH);
    1212:	81 e0       	ldi	r24, 0x01	; 1
    1214:	62 e0       	ldi	r22, 0x02	; 2
    1216:	41 e0       	ldi	r20, 0x01	; 1
    1218:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <DIO_setPinval>
    121c:	0d c0       	rjmp	.+26     	; 0x1238 <Seven_segment_enable+0x42>
	}
	else if (Segment == unit)
    121e:	89 81       	ldd	r24, Y+1	; 0x01
    1220:	88 23       	and	r24, r24
    1222:	51 f4       	brne	.+20     	; 0x1238 <Seven_segment_enable+0x42>
	{
		DIO_setPinDir(B, PIN1, output);
    1224:	81 e0       	ldi	r24, 0x01	; 1
    1226:	61 e0       	ldi	r22, 0x01	; 1
    1228:	41 e0       	ldi	r20, 0x01	; 1
    122a:	0e 94 5e 06 	call	0xcbc	; 0xcbc <DIO_setPinDir>
		DIO_setPinval(B, PIN1, HIGH);
    122e:	81 e0       	ldi	r24, 0x01	; 1
    1230:	61 e0       	ldi	r22, 0x01	; 1
    1232:	41 e0       	ldi	r20, 0x01	; 1
    1234:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <DIO_setPinval>
	}
}
    1238:	0f 90       	pop	r0
    123a:	cf 91       	pop	r28
    123c:	df 91       	pop	r29
    123e:	08 95       	ret

00001240 <Seven_segment_disable>:

/*******************enable 7_segment*********************/
void Seven_segment_disable(u8 Segment)
{
    1240:	df 93       	push	r29
    1242:	cf 93       	push	r28
    1244:	0f 92       	push	r0
    1246:	cd b7       	in	r28, 0x3d	; 61
    1248:	de b7       	in	r29, 0x3e	; 62
    124a:	89 83       	std	Y+1, r24	; 0x01
	if (Segment == tens)
    124c:	89 81       	ldd	r24, Y+1	; 0x01
    124e:	81 30       	cpi	r24, 0x01	; 1
    1250:	59 f4       	brne	.+22     	; 0x1268 <Seven_segment_disable+0x28>
	{
		DIO_setPinDir(B, PIN2, output);
    1252:	81 e0       	ldi	r24, 0x01	; 1
    1254:	62 e0       	ldi	r22, 0x02	; 2
    1256:	41 e0       	ldi	r20, 0x01	; 1
    1258:	0e 94 5e 06 	call	0xcbc	; 0xcbc <DIO_setPinDir>
		DIO_setPinval(B, PIN2, LOW);
    125c:	81 e0       	ldi	r24, 0x01	; 1
    125e:	62 e0       	ldi	r22, 0x02	; 2
    1260:	40 e0       	ldi	r20, 0x00	; 0
    1262:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <DIO_setPinval>
    1266:	0d c0       	rjmp	.+26     	; 0x1282 <Seven_segment_disable+0x42>
	}
	else if (Segment == unit)
    1268:	89 81       	ldd	r24, Y+1	; 0x01
    126a:	88 23       	and	r24, r24
    126c:	51 f4       	brne	.+20     	; 0x1282 <Seven_segment_disable+0x42>
	{
		DIO_setPinDir(B, PIN1, output);
    126e:	81 e0       	ldi	r24, 0x01	; 1
    1270:	61 e0       	ldi	r22, 0x01	; 1
    1272:	41 e0       	ldi	r20, 0x01	; 1
    1274:	0e 94 5e 06 	call	0xcbc	; 0xcbc <DIO_setPinDir>
		DIO_setPinval(B, PIN1, LOW);
    1278:	81 e0       	ldi	r24, 0x01	; 1
    127a:	61 e0       	ldi	r22, 0x01	; 1
    127c:	40 e0       	ldi	r20, 0x00	; 0
    127e:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <DIO_setPinval>
	}
}
    1282:	0f 90       	pop	r0
    1284:	cf 91       	pop	r28
    1286:	df 91       	pop	r29
    1288:	08 95       	ret

0000128a <Seven_segment_init>:
/**************active 7_segment on which pins *****************/
void Seven_segment_init(u8 PORTID,u8 type)
{
    128a:	df 93       	push	r29
    128c:	cf 93       	push	r28
    128e:	00 d0       	rcall	.+0      	; 0x1290 <Seven_segment_init+0x6>
    1290:	cd b7       	in	r28, 0x3d	; 61
    1292:	de b7       	in	r29, 0x3e	; 62
    1294:	89 83       	std	Y+1, r24	; 0x01
    1296:	6a 83       	std	Y+2, r22	; 0x02
  if(type == MSB)
    1298:	8a 81       	ldd	r24, Y+2	; 0x02
    129a:	80 3f       	cpi	r24, 0xF0	; 240
    129c:	a9 f4       	brne	.+42     	; 0x12c8 <Seven_segment_init+0x3e>
  {
	  DIO_setPinDir(PORTID, PIN4, output);
    129e:	89 81       	ldd	r24, Y+1	; 0x01
    12a0:	64 e0       	ldi	r22, 0x04	; 4
    12a2:	41 e0       	ldi	r20, 0x01	; 1
    12a4:	0e 94 5e 06 	call	0xcbc	; 0xcbc <DIO_setPinDir>
	  DIO_setPinDir(PORTID, PIN5, output);
    12a8:	89 81       	ldd	r24, Y+1	; 0x01
    12aa:	65 e0       	ldi	r22, 0x05	; 5
    12ac:	41 e0       	ldi	r20, 0x01	; 1
    12ae:	0e 94 5e 06 	call	0xcbc	; 0xcbc <DIO_setPinDir>
	  DIO_setPinDir(PORTID, PIN6, output);
    12b2:	89 81       	ldd	r24, Y+1	; 0x01
    12b4:	66 e0       	ldi	r22, 0x06	; 6
    12b6:	41 e0       	ldi	r20, 0x01	; 1
    12b8:	0e 94 5e 06 	call	0xcbc	; 0xcbc <DIO_setPinDir>
	  DIO_setPinDir(PORTID, PIN7, output);
    12bc:	89 81       	ldd	r24, Y+1	; 0x01
    12be:	67 e0       	ldi	r22, 0x07	; 7
    12c0:	41 e0       	ldi	r20, 0x01	; 1
    12c2:	0e 94 5e 06 	call	0xcbc	; 0xcbc <DIO_setPinDir>
    12c6:	17 c0       	rjmp	.+46     	; 0x12f6 <Seven_segment_init+0x6c>
  }
  else if (type == LSB)
    12c8:	8a 81       	ldd	r24, Y+2	; 0x02
    12ca:	8f 30       	cpi	r24, 0x0F	; 15
    12cc:	a1 f4       	brne	.+40     	; 0x12f6 <Seven_segment_init+0x6c>
  {
	  DIO_setPinDir(PORTID, PIN0, output);
    12ce:	89 81       	ldd	r24, Y+1	; 0x01
    12d0:	60 e0       	ldi	r22, 0x00	; 0
    12d2:	41 e0       	ldi	r20, 0x01	; 1
    12d4:	0e 94 5e 06 	call	0xcbc	; 0xcbc <DIO_setPinDir>
	  DIO_setPinDir(PORTID, PIN1, output);
    12d8:	89 81       	ldd	r24, Y+1	; 0x01
    12da:	61 e0       	ldi	r22, 0x01	; 1
    12dc:	41 e0       	ldi	r20, 0x01	; 1
    12de:	0e 94 5e 06 	call	0xcbc	; 0xcbc <DIO_setPinDir>
	  DIO_setPinDir(PORTID, PIN2, output);
    12e2:	89 81       	ldd	r24, Y+1	; 0x01
    12e4:	62 e0       	ldi	r22, 0x02	; 2
    12e6:	41 e0       	ldi	r20, 0x01	; 1
    12e8:	0e 94 5e 06 	call	0xcbc	; 0xcbc <DIO_setPinDir>
	  DIO_setPinDir(PORTID, PIN3, output);
    12ec:	89 81       	ldd	r24, Y+1	; 0x01
    12ee:	63 e0       	ldi	r22, 0x03	; 3
    12f0:	41 e0       	ldi	r20, 0x01	; 1
    12f2:	0e 94 5e 06 	call	0xcbc	; 0xcbc <DIO_setPinDir>
  }
}
    12f6:	0f 90       	pop	r0
    12f8:	0f 90       	pop	r0
    12fa:	cf 91       	pop	r28
    12fc:	df 91       	pop	r29
    12fe:	08 95       	ret

00001300 <Write_Seven_segment>:


/*********************write value on 7_segment*****************/
void Write_Seven_segment(u8 PORTID,u8 type, u8 num)
{
    1300:	df 93       	push	r29
    1302:	cf 93       	push	r28
    1304:	cd b7       	in	r28, 0x3d	; 61
    1306:	de b7       	in	r29, 0x3e	; 62
    1308:	27 97       	sbiw	r28, 0x07	; 7
    130a:	0f b6       	in	r0, 0x3f	; 63
    130c:	f8 94       	cli
    130e:	de bf       	out	0x3e, r29	; 62
    1310:	0f be       	out	0x3f, r0	; 63
    1312:	cd bf       	out	0x3d, r28	; 61
    1314:	89 83       	std	Y+1, r24	; 0x01
    1316:	6a 83       	std	Y+2, r22	; 0x02
    1318:	4b 83       	std	Y+3, r20	; 0x03
	if(type == MSB)
    131a:	8a 81       	ldd	r24, Y+2	; 0x02
    131c:	80 3f       	cpi	r24, 0xF0	; 240
    131e:	09 f0       	breq	.+2      	; 0x1322 <Write_Seven_segment+0x22>
    1320:	6b c0       	rjmp	.+214    	; 0x13f8 <Write_Seven_segment+0xf8>
	{
		switch(PORTID)
    1322:	89 81       	ldd	r24, Y+1	; 0x01
    1324:	28 2f       	mov	r18, r24
    1326:	30 e0       	ldi	r19, 0x00	; 0
    1328:	3f 83       	std	Y+7, r19	; 0x07
    132a:	2e 83       	std	Y+6, r18	; 0x06
    132c:	8e 81       	ldd	r24, Y+6	; 0x06
    132e:	9f 81       	ldd	r25, Y+7	; 0x07
    1330:	81 30       	cpi	r24, 0x01	; 1
    1332:	91 05       	cpc	r25, r1
    1334:	41 f1       	breq	.+80     	; 0x1386 <Write_Seven_segment+0x86>
    1336:	2e 81       	ldd	r18, Y+6	; 0x06
    1338:	3f 81       	ldd	r19, Y+7	; 0x07
    133a:	22 30       	cpi	r18, 0x02	; 2
    133c:	31 05       	cpc	r19, r1
    133e:	2c f4       	brge	.+10     	; 0x134a <Write_Seven_segment+0x4a>
    1340:	8e 81       	ldd	r24, Y+6	; 0x06
    1342:	9f 81       	ldd	r25, Y+7	; 0x07
    1344:	00 97       	sbiw	r24, 0x00	; 0
    1346:	61 f0       	breq	.+24     	; 0x1360 <Write_Seven_segment+0x60>
    1348:	a1 c0       	rjmp	.+322    	; 0x148c <Write_Seven_segment+0x18c>
    134a:	2e 81       	ldd	r18, Y+6	; 0x06
    134c:	3f 81       	ldd	r19, Y+7	; 0x07
    134e:	22 30       	cpi	r18, 0x02	; 2
    1350:	31 05       	cpc	r19, r1
    1352:	61 f1       	breq	.+88     	; 0x13ac <Write_Seven_segment+0xac>
    1354:	8e 81       	ldd	r24, Y+6	; 0x06
    1356:	9f 81       	ldd	r25, Y+7	; 0x07
    1358:	83 30       	cpi	r24, 0x03	; 3
    135a:	91 05       	cpc	r25, r1
    135c:	d1 f1       	breq	.+116    	; 0x13d2 <Write_Seven_segment+0xd2>
    135e:	96 c0       	rjmp	.+300    	; 0x148c <Write_Seven_segment+0x18c>
				{
				case A: PORTA=(PORTA & 0x0f) | (num<<4);
    1360:	ab e3       	ldi	r26, 0x3B	; 59
    1362:	b0 e0       	ldi	r27, 0x00	; 0
    1364:	eb e3       	ldi	r30, 0x3B	; 59
    1366:	f0 e0       	ldi	r31, 0x00	; 0
    1368:	80 81       	ld	r24, Z
    136a:	28 2f       	mov	r18, r24
    136c:	2f 70       	andi	r18, 0x0F	; 15
    136e:	8b 81       	ldd	r24, Y+3	; 0x03
    1370:	88 2f       	mov	r24, r24
    1372:	90 e0       	ldi	r25, 0x00	; 0
    1374:	82 95       	swap	r24
    1376:	92 95       	swap	r25
    1378:	90 7f       	andi	r25, 0xF0	; 240
    137a:	98 27       	eor	r25, r24
    137c:	80 7f       	andi	r24, 0xF0	; 240
    137e:	98 27       	eor	r25, r24
    1380:	82 2b       	or	r24, r18
    1382:	8c 93       	st	X, r24
    1384:	83 c0       	rjmp	.+262    	; 0x148c <Write_Seven_segment+0x18c>
					break;
				case B: PORTB=(PORTB & 0x0f) | (num<<4);
    1386:	a8 e3       	ldi	r26, 0x38	; 56
    1388:	b0 e0       	ldi	r27, 0x00	; 0
    138a:	e8 e3       	ldi	r30, 0x38	; 56
    138c:	f0 e0       	ldi	r31, 0x00	; 0
    138e:	80 81       	ld	r24, Z
    1390:	28 2f       	mov	r18, r24
    1392:	2f 70       	andi	r18, 0x0F	; 15
    1394:	8b 81       	ldd	r24, Y+3	; 0x03
    1396:	88 2f       	mov	r24, r24
    1398:	90 e0       	ldi	r25, 0x00	; 0
    139a:	82 95       	swap	r24
    139c:	92 95       	swap	r25
    139e:	90 7f       	andi	r25, 0xF0	; 240
    13a0:	98 27       	eor	r25, r24
    13a2:	80 7f       	andi	r24, 0xF0	; 240
    13a4:	98 27       	eor	r25, r24
    13a6:	82 2b       	or	r24, r18
    13a8:	8c 93       	st	X, r24
    13aa:	70 c0       	rjmp	.+224    	; 0x148c <Write_Seven_segment+0x18c>
					break;
				case C: PORTC=(PORTC & 0x0f) | (num<<4);
    13ac:	a5 e3       	ldi	r26, 0x35	; 53
    13ae:	b0 e0       	ldi	r27, 0x00	; 0
    13b0:	e5 e3       	ldi	r30, 0x35	; 53
    13b2:	f0 e0       	ldi	r31, 0x00	; 0
    13b4:	80 81       	ld	r24, Z
    13b6:	28 2f       	mov	r18, r24
    13b8:	2f 70       	andi	r18, 0x0F	; 15
    13ba:	8b 81       	ldd	r24, Y+3	; 0x03
    13bc:	88 2f       	mov	r24, r24
    13be:	90 e0       	ldi	r25, 0x00	; 0
    13c0:	82 95       	swap	r24
    13c2:	92 95       	swap	r25
    13c4:	90 7f       	andi	r25, 0xF0	; 240
    13c6:	98 27       	eor	r25, r24
    13c8:	80 7f       	andi	r24, 0xF0	; 240
    13ca:	98 27       	eor	r25, r24
    13cc:	82 2b       	or	r24, r18
    13ce:	8c 93       	st	X, r24
    13d0:	5d c0       	rjmp	.+186    	; 0x148c <Write_Seven_segment+0x18c>
					break;
				case D: PORTD=(PORTD & 0x0f) | (num<<4);
    13d2:	a2 e3       	ldi	r26, 0x32	; 50
    13d4:	b0 e0       	ldi	r27, 0x00	; 0
    13d6:	e2 e3       	ldi	r30, 0x32	; 50
    13d8:	f0 e0       	ldi	r31, 0x00	; 0
    13da:	80 81       	ld	r24, Z
    13dc:	28 2f       	mov	r18, r24
    13de:	2f 70       	andi	r18, 0x0F	; 15
    13e0:	8b 81       	ldd	r24, Y+3	; 0x03
    13e2:	88 2f       	mov	r24, r24
    13e4:	90 e0       	ldi	r25, 0x00	; 0
    13e6:	82 95       	swap	r24
    13e8:	92 95       	swap	r25
    13ea:	90 7f       	andi	r25, 0xF0	; 240
    13ec:	98 27       	eor	r25, r24
    13ee:	80 7f       	andi	r24, 0xF0	; 240
    13f0:	98 27       	eor	r25, r24
    13f2:	82 2b       	or	r24, r18
    13f4:	8c 93       	st	X, r24
    13f6:	4a c0       	rjmp	.+148    	; 0x148c <Write_Seven_segment+0x18c>
					break;
				default:/*do no thing*/
					break;
				}
	}
	else if (type == LSB)
    13f8:	8a 81       	ldd	r24, Y+2	; 0x02
    13fa:	8f 30       	cpi	r24, 0x0F	; 15
    13fc:	09 f0       	breq	.+2      	; 0x1400 <Write_Seven_segment+0x100>
    13fe:	46 c0       	rjmp	.+140    	; 0x148c <Write_Seven_segment+0x18c>
	{
		switch(PORTID)
    1400:	89 81       	ldd	r24, Y+1	; 0x01
    1402:	28 2f       	mov	r18, r24
    1404:	30 e0       	ldi	r19, 0x00	; 0
    1406:	3d 83       	std	Y+5, r19	; 0x05
    1408:	2c 83       	std	Y+4, r18	; 0x04
    140a:	8c 81       	ldd	r24, Y+4	; 0x04
    140c:	9d 81       	ldd	r25, Y+5	; 0x05
    140e:	81 30       	cpi	r24, 0x01	; 1
    1410:	91 05       	cpc	r25, r1
    1412:	f9 f0       	breq	.+62     	; 0x1452 <Write_Seven_segment+0x152>
    1414:	2c 81       	ldd	r18, Y+4	; 0x04
    1416:	3d 81       	ldd	r19, Y+5	; 0x05
    1418:	22 30       	cpi	r18, 0x02	; 2
    141a:	31 05       	cpc	r19, r1
    141c:	2c f4       	brge	.+10     	; 0x1428 <Write_Seven_segment+0x128>
    141e:	8c 81       	ldd	r24, Y+4	; 0x04
    1420:	9d 81       	ldd	r25, Y+5	; 0x05
    1422:	00 97       	sbiw	r24, 0x00	; 0
    1424:	61 f0       	breq	.+24     	; 0x143e <Write_Seven_segment+0x13e>
    1426:	32 c0       	rjmp	.+100    	; 0x148c <Write_Seven_segment+0x18c>
    1428:	2c 81       	ldd	r18, Y+4	; 0x04
    142a:	3d 81       	ldd	r19, Y+5	; 0x05
    142c:	22 30       	cpi	r18, 0x02	; 2
    142e:	31 05       	cpc	r19, r1
    1430:	d1 f0       	breq	.+52     	; 0x1466 <Write_Seven_segment+0x166>
    1432:	8c 81       	ldd	r24, Y+4	; 0x04
    1434:	9d 81       	ldd	r25, Y+5	; 0x05
    1436:	83 30       	cpi	r24, 0x03	; 3
    1438:	91 05       	cpc	r25, r1
    143a:	f9 f0       	breq	.+62     	; 0x147a <Write_Seven_segment+0x17a>
    143c:	27 c0       	rjmp	.+78     	; 0x148c <Write_Seven_segment+0x18c>
		{
		case A: PORTA=(PORTID & 0xf0) | (num & 0x0f);
    143e:	eb e3       	ldi	r30, 0x3B	; 59
    1440:	f0 e0       	ldi	r31, 0x00	; 0
    1442:	89 81       	ldd	r24, Y+1	; 0x01
    1444:	98 2f       	mov	r25, r24
    1446:	90 7f       	andi	r25, 0xF0	; 240
    1448:	8b 81       	ldd	r24, Y+3	; 0x03
    144a:	8f 70       	andi	r24, 0x0F	; 15
    144c:	89 2b       	or	r24, r25
    144e:	80 83       	st	Z, r24
    1450:	1d c0       	rjmp	.+58     	; 0x148c <Write_Seven_segment+0x18c>
			break;
		case B: PORTB=(PORTID & 0xf0) | (num & 0x0f);
    1452:	e8 e3       	ldi	r30, 0x38	; 56
    1454:	f0 e0       	ldi	r31, 0x00	; 0
    1456:	89 81       	ldd	r24, Y+1	; 0x01
    1458:	98 2f       	mov	r25, r24
    145a:	90 7f       	andi	r25, 0xF0	; 240
    145c:	8b 81       	ldd	r24, Y+3	; 0x03
    145e:	8f 70       	andi	r24, 0x0F	; 15
    1460:	89 2b       	or	r24, r25
    1462:	80 83       	st	Z, r24
    1464:	13 c0       	rjmp	.+38     	; 0x148c <Write_Seven_segment+0x18c>
			break;
		case C: PORTC=(PORTID & 0xf0) | (num & 0x0f);
    1466:	e5 e3       	ldi	r30, 0x35	; 53
    1468:	f0 e0       	ldi	r31, 0x00	; 0
    146a:	89 81       	ldd	r24, Y+1	; 0x01
    146c:	98 2f       	mov	r25, r24
    146e:	90 7f       	andi	r25, 0xF0	; 240
    1470:	8b 81       	ldd	r24, Y+3	; 0x03
    1472:	8f 70       	andi	r24, 0x0F	; 15
    1474:	89 2b       	or	r24, r25
    1476:	80 83       	st	Z, r24
    1478:	09 c0       	rjmp	.+18     	; 0x148c <Write_Seven_segment+0x18c>
			break;
		case D: PORTD=(PORTID & 0xf0) | (num & 0x0f);
    147a:	e2 e3       	ldi	r30, 0x32	; 50
    147c:	f0 e0       	ldi	r31, 0x00	; 0
    147e:	89 81       	ldd	r24, Y+1	; 0x01
    1480:	98 2f       	mov	r25, r24
    1482:	90 7f       	andi	r25, 0xF0	; 240
    1484:	8b 81       	ldd	r24, Y+3	; 0x03
    1486:	8f 70       	andi	r24, 0x0F	; 15
    1488:	89 2b       	or	r24, r25
    148a:	80 83       	st	Z, r24
			break;
		default:/*do no thing*/
			break;
		}
	}
}
    148c:	27 96       	adiw	r28, 0x07	; 7
    148e:	0f b6       	in	r0, 0x3f	; 63
    1490:	f8 94       	cli
    1492:	de bf       	out	0x3e, r29	; 62
    1494:	0f be       	out	0x3f, r0	; 63
    1496:	cd bf       	out	0x3d, r28	; 61
    1498:	cf 91       	pop	r28
    149a:	df 91       	pop	r29
    149c:	08 95       	ret

0000149e <Read_Seven_segment>:


/***********************read value on 7_segment***********************/
u8 Read_Seven_segment(u8 PORTID,u8 type)
{
    149e:	df 93       	push	r29
    14a0:	cf 93       	push	r28
    14a2:	00 d0       	rcall	.+0      	; 0x14a4 <Read_Seven_segment+0x6>
    14a4:	00 d0       	rcall	.+0      	; 0x14a6 <Read_Seven_segment+0x8>
    14a6:	cd b7       	in	r28, 0x3d	; 61
    14a8:	de b7       	in	r29, 0x3e	; 62
    14aa:	8b 83       	std	Y+3, r24	; 0x03
    14ac:	6c 83       	std	Y+4, r22	; 0x04
	int Bits;
	if(type == MSB)
    14ae:	8c 81       	ldd	r24, Y+4	; 0x04
    14b0:	80 3f       	cpi	r24, 0xF0	; 240
    14b2:	49 f4       	brne	.+18     	; 0x14c6 <Read_Seven_segment+0x28>
	{
		Bits = ((PORTID & 0xf0)>>4);
    14b4:	8b 81       	ldd	r24, Y+3	; 0x03
    14b6:	82 95       	swap	r24
    14b8:	8f 70       	andi	r24, 0x0F	; 15
    14ba:	88 2f       	mov	r24, r24
    14bc:	90 e0       	ldi	r25, 0x00	; 0
    14be:	90 70       	andi	r25, 0x00	; 0
    14c0:	9a 83       	std	Y+2, r25	; 0x02
    14c2:	89 83       	std	Y+1, r24	; 0x01
    14c4:	0a c0       	rjmp	.+20     	; 0x14da <Read_Seven_segment+0x3c>
	}
	else if (type == LSB)
    14c6:	8c 81       	ldd	r24, Y+4	; 0x04
    14c8:	8f 30       	cpi	r24, 0x0F	; 15
    14ca:	39 f4       	brne	.+14     	; 0x14da <Read_Seven_segment+0x3c>
	{
		Bits = (PORTID & 0x0f);
    14cc:	8b 81       	ldd	r24, Y+3	; 0x03
    14ce:	88 2f       	mov	r24, r24
    14d0:	90 e0       	ldi	r25, 0x00	; 0
    14d2:	8f 70       	andi	r24, 0x0F	; 15
    14d4:	90 70       	andi	r25, 0x00	; 0
    14d6:	9a 83       	std	Y+2, r25	; 0x02
    14d8:	89 83       	std	Y+1, r24	; 0x01
	}
 return Bits ;
    14da:	89 81       	ldd	r24, Y+1	; 0x01
}
    14dc:	0f 90       	pop	r0
    14de:	0f 90       	pop	r0
    14e0:	0f 90       	pop	r0
    14e2:	0f 90       	pop	r0
    14e4:	cf 91       	pop	r28
    14e6:	df 91       	pop	r29
    14e8:	08 95       	ret

000014ea <PB_init>:
#include "../../MCAL/MCAL_DIO/DIO_interface.h"


/**************set pin to be output for PushButton*************/
void PB_init(u8 PORTID,u8 PINID)
{
    14ea:	df 93       	push	r29
    14ec:	cf 93       	push	r28
    14ee:	00 d0       	rcall	.+0      	; 0x14f0 <PB_init+0x6>
    14f0:	cd b7       	in	r28, 0x3d	; 61
    14f2:	de b7       	in	r29, 0x3e	; 62
    14f4:	89 83       	std	Y+1, r24	; 0x01
    14f6:	6a 83       	std	Y+2, r22	; 0x02
	DIO_setPinDir(PORTID, PINID, input);
    14f8:	89 81       	ldd	r24, Y+1	; 0x01
    14fa:	6a 81       	ldd	r22, Y+2	; 0x02
    14fc:	40 e0       	ldi	r20, 0x00	; 0
    14fe:	0e 94 5e 06 	call	0xcbc	; 0xcbc <DIO_setPinDir>
}
    1502:	0f 90       	pop	r0
    1504:	0f 90       	pop	r0
    1506:	cf 91       	pop	r28
    1508:	df 91       	pop	r29
    150a:	08 95       	ret

0000150c <PB_state>:


/**************check value on pin***************/
u8 PB_state(u8 PORTID,u8 PINID)
{
    150c:	df 93       	push	r29
    150e:	cf 93       	push	r28
    1510:	00 d0       	rcall	.+0      	; 0x1512 <PB_state+0x6>
    1512:	cd b7       	in	r28, 0x3d	; 61
    1514:	de b7       	in	r29, 0x3e	; 62
    1516:	89 83       	std	Y+1, r24	; 0x01
    1518:	6a 83       	std	Y+2, r22	; 0x02
	return DIO_getPinval(PORTID,PINID);
    151a:	89 81       	ldd	r24, Y+1	; 0x01
    151c:	6a 81       	ldd	r22, Y+2	; 0x02
    151e:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <DIO_getPinval>
}
    1522:	0f 90       	pop	r0
    1524:	0f 90       	pop	r0
    1526:	cf 91       	pop	r28
    1528:	df 91       	pop	r29
    152a:	08 95       	ret

0000152c <MOTOR_init>:
 */
#include "MORTOR_interface.h"
#include "../../MCAL/MCAL_DIO/DIO_interface.h"

void MOTOR_init(u8 PORTID,u8 PINID_1,u8 PINID_2)
{
    152c:	df 93       	push	r29
    152e:	cf 93       	push	r28
    1530:	00 d0       	rcall	.+0      	; 0x1532 <MOTOR_init+0x6>
    1532:	0f 92       	push	r0
    1534:	cd b7       	in	r28, 0x3d	; 61
    1536:	de b7       	in	r29, 0x3e	; 62
    1538:	89 83       	std	Y+1, r24	; 0x01
    153a:	6a 83       	std	Y+2, r22	; 0x02
    153c:	4b 83       	std	Y+3, r20	; 0x03
	DIO_setPinDir(PORTID, PINID_1, output);
    153e:	89 81       	ldd	r24, Y+1	; 0x01
    1540:	6a 81       	ldd	r22, Y+2	; 0x02
    1542:	41 e0       	ldi	r20, 0x01	; 1
    1544:	0e 94 5e 06 	call	0xcbc	; 0xcbc <DIO_setPinDir>
	DIO_setPinDir(PORTID, PINID_2, output);
    1548:	89 81       	ldd	r24, Y+1	; 0x01
    154a:	6b 81       	ldd	r22, Y+3	; 0x03
    154c:	41 e0       	ldi	r20, 0x01	; 1
    154e:	0e 94 5e 06 	call	0xcbc	; 0xcbc <DIO_setPinDir>
}
    1552:	0f 90       	pop	r0
    1554:	0f 90       	pop	r0
    1556:	0f 90       	pop	r0
    1558:	cf 91       	pop	r28
    155a:	df 91       	pop	r29
    155c:	08 95       	ret

0000155e <MOTOR_CW>:

void MOTOR_CW(u8 PORTID,u8 PINID_1,u8 PINID_2)
{
    155e:	df 93       	push	r29
    1560:	cf 93       	push	r28
    1562:	00 d0       	rcall	.+0      	; 0x1564 <MOTOR_CW+0x6>
    1564:	0f 92       	push	r0
    1566:	cd b7       	in	r28, 0x3d	; 61
    1568:	de b7       	in	r29, 0x3e	; 62
    156a:	89 83       	std	Y+1, r24	; 0x01
    156c:	6a 83       	std	Y+2, r22	; 0x02
    156e:	4b 83       	std	Y+3, r20	; 0x03
	DIO_setPinval(PORTID, PINID_1, LOW);
    1570:	89 81       	ldd	r24, Y+1	; 0x01
    1572:	6a 81       	ldd	r22, Y+2	; 0x02
    1574:	40 e0       	ldi	r20, 0x00	; 0
    1576:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <DIO_setPinval>
	DIO_setPinval(PORTID, PINID_2, HIGH);
    157a:	89 81       	ldd	r24, Y+1	; 0x01
    157c:	6b 81       	ldd	r22, Y+3	; 0x03
    157e:	41 e0       	ldi	r20, 0x01	; 1
    1580:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <DIO_setPinval>
}
    1584:	0f 90       	pop	r0
    1586:	0f 90       	pop	r0
    1588:	0f 90       	pop	r0
    158a:	cf 91       	pop	r28
    158c:	df 91       	pop	r29
    158e:	08 95       	ret

00001590 <MOTOR_off>:

void MOTOR_off(u8 PORTID,u8 PINID_1,u8 PINID_2)
{
    1590:	df 93       	push	r29
    1592:	cf 93       	push	r28
    1594:	00 d0       	rcall	.+0      	; 0x1596 <MOTOR_off+0x6>
    1596:	0f 92       	push	r0
    1598:	cd b7       	in	r28, 0x3d	; 61
    159a:	de b7       	in	r29, 0x3e	; 62
    159c:	89 83       	std	Y+1, r24	; 0x01
    159e:	6a 83       	std	Y+2, r22	; 0x02
    15a0:	4b 83       	std	Y+3, r20	; 0x03
	DIO_setPinval(PORTID, PINID_1, HIGH);
    15a2:	89 81       	ldd	r24, Y+1	; 0x01
    15a4:	6a 81       	ldd	r22, Y+2	; 0x02
    15a6:	41 e0       	ldi	r20, 0x01	; 1
    15a8:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <DIO_setPinval>
	DIO_setPinval(PORTID, PINID_1, HIGH);
    15ac:	89 81       	ldd	r24, Y+1	; 0x01
    15ae:	6a 81       	ldd	r22, Y+2	; 0x02
    15b0:	41 e0       	ldi	r20, 0x01	; 1
    15b2:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <DIO_setPinval>
}
    15b6:	0f 90       	pop	r0
    15b8:	0f 90       	pop	r0
    15ba:	0f 90       	pop	r0
    15bc:	cf 91       	pop	r28
    15be:	df 91       	pop	r29
    15c0:	08 95       	ret

000015c2 <MOTOR_CCW>:

void MOTOR_CCW(u8 PORTID,u8 PINID_1,u8 PINID_2)
{
    15c2:	df 93       	push	r29
    15c4:	cf 93       	push	r28
    15c6:	00 d0       	rcall	.+0      	; 0x15c8 <MOTOR_CCW+0x6>
    15c8:	0f 92       	push	r0
    15ca:	cd b7       	in	r28, 0x3d	; 61
    15cc:	de b7       	in	r29, 0x3e	; 62
    15ce:	89 83       	std	Y+1, r24	; 0x01
    15d0:	6a 83       	std	Y+2, r22	; 0x02
    15d2:	4b 83       	std	Y+3, r20	; 0x03
	DIO_setPinval(PORTID, PINID_1, HIGH);
    15d4:	89 81       	ldd	r24, Y+1	; 0x01
    15d6:	6a 81       	ldd	r22, Y+2	; 0x02
    15d8:	41 e0       	ldi	r20, 0x01	; 1
    15da:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <DIO_setPinval>
	DIO_setPinval(PORTID, PINID_2, LOW);
    15de:	89 81       	ldd	r24, Y+1	; 0x01
    15e0:	6b 81       	ldd	r22, Y+3	; 0x03
    15e2:	40 e0       	ldi	r20, 0x00	; 0
    15e4:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <DIO_setPinval>
}
    15e8:	0f 90       	pop	r0
    15ea:	0f 90       	pop	r0
    15ec:	0f 90       	pop	r0
    15ee:	cf 91       	pop	r28
    15f0:	df 91       	pop	r29
    15f2:	08 95       	ret

000015f4 <MOTOR_BREAK>:

void MOTOR_BREAK(u8 PORTID,u8 PINID_1,u8 PINID_2)
{
    15f4:	df 93       	push	r29
    15f6:	cf 93       	push	r28
    15f8:	00 d0       	rcall	.+0      	; 0x15fa <MOTOR_BREAK+0x6>
    15fa:	0f 92       	push	r0
    15fc:	cd b7       	in	r28, 0x3d	; 61
    15fe:	de b7       	in	r29, 0x3e	; 62
    1600:	89 83       	std	Y+1, r24	; 0x01
    1602:	6a 83       	std	Y+2, r22	; 0x02
    1604:	4b 83       	std	Y+3, r20	; 0x03
	DIO_setPinval(PORTID, PINID_1, LOW);
    1606:	89 81       	ldd	r24, Y+1	; 0x01
    1608:	6a 81       	ldd	r22, Y+2	; 0x02
    160a:	40 e0       	ldi	r20, 0x00	; 0
    160c:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <DIO_setPinval>
	DIO_setPinval(PORTID, PINID_2, LOW);
    1610:	89 81       	ldd	r24, Y+1	; 0x01
    1612:	6b 81       	ldd	r22, Y+3	; 0x03
    1614:	40 e0       	ldi	r20, 0x00	; 0
    1616:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <DIO_setPinval>
}
    161a:	0f 90       	pop	r0
    161c:	0f 90       	pop	r0
    161e:	0f 90       	pop	r0
    1620:	cf 91       	pop	r28
    1622:	df 91       	pop	r29
    1624:	08 95       	ret

00001626 <LED_init>:
 */

#include "LED_interface.h"
/***********setPinDir to output**********/
void LED_init(u8 PORTID,u8 PINID)
{
    1626:	df 93       	push	r29
    1628:	cf 93       	push	r28
    162a:	00 d0       	rcall	.+0      	; 0x162c <LED_init+0x6>
    162c:	cd b7       	in	r28, 0x3d	; 61
    162e:	de b7       	in	r29, 0x3e	; 62
    1630:	89 83       	std	Y+1, r24	; 0x01
    1632:	6a 83       	std	Y+2, r22	; 0x02
	DIO_setPinDir(PORTID, PINID,output);
    1634:	89 81       	ldd	r24, Y+1	; 0x01
    1636:	6a 81       	ldd	r22, Y+2	; 0x02
    1638:	41 e0       	ldi	r20, 0x01	; 1
    163a:	0e 94 5e 06 	call	0xcbc	; 0xcbc <DIO_setPinDir>
}
    163e:	0f 90       	pop	r0
    1640:	0f 90       	pop	r0
    1642:	cf 91       	pop	r28
    1644:	df 91       	pop	r29
    1646:	08 95       	ret

00001648 <LED_on>:



/***********setPinval to high**********/
void LED_on(u8 PORTID,u8 PINID)
{
    1648:	df 93       	push	r29
    164a:	cf 93       	push	r28
    164c:	00 d0       	rcall	.+0      	; 0x164e <LED_on+0x6>
    164e:	cd b7       	in	r28, 0x3d	; 61
    1650:	de b7       	in	r29, 0x3e	; 62
    1652:	89 83       	std	Y+1, r24	; 0x01
    1654:	6a 83       	std	Y+2, r22	; 0x02
	DIO_setPinval(PORTID,PINID,HIGH);
    1656:	89 81       	ldd	r24, Y+1	; 0x01
    1658:	6a 81       	ldd	r22, Y+2	; 0x02
    165a:	41 e0       	ldi	r20, 0x01	; 1
    165c:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <DIO_setPinval>
}
    1660:	0f 90       	pop	r0
    1662:	0f 90       	pop	r0
    1664:	cf 91       	pop	r28
    1666:	df 91       	pop	r29
    1668:	08 95       	ret

0000166a <LED_off>:



/***********setPinval to low**********/
void LED_off(u8 PORTID,u8 PINID)
{
    166a:	df 93       	push	r29
    166c:	cf 93       	push	r28
    166e:	00 d0       	rcall	.+0      	; 0x1670 <LED_off+0x6>
    1670:	cd b7       	in	r28, 0x3d	; 61
    1672:	de b7       	in	r29, 0x3e	; 62
    1674:	89 83       	std	Y+1, r24	; 0x01
    1676:	6a 83       	std	Y+2, r22	; 0x02
	DIO_setPinval(PORTID,PINID,LOW);
    1678:	89 81       	ldd	r24, Y+1	; 0x01
    167a:	6a 81       	ldd	r22, Y+2	; 0x02
    167c:	40 e0       	ldi	r20, 0x00	; 0
    167e:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <DIO_setPinval>
}
    1682:	0f 90       	pop	r0
    1684:	0f 90       	pop	r0
    1686:	cf 91       	pop	r28
    1688:	df 91       	pop	r29
    168a:	08 95       	ret

0000168c <LED_toggle>:



/***************toggle led between high and low*****************/
void LED_toggle(u8 PORTID,u8 PINID)
{
    168c:	df 93       	push	r29
    168e:	cf 93       	push	r28
    1690:	00 d0       	rcall	.+0      	; 0x1692 <LED_toggle+0x6>
    1692:	cd b7       	in	r28, 0x3d	; 61
    1694:	de b7       	in	r29, 0x3e	; 62
    1696:	89 83       	std	Y+1, r24	; 0x01
    1698:	6a 83       	std	Y+2, r22	; 0x02
	if(DIO_getPinval(PORTID,PINID)==HIGH)
    169a:	89 81       	ldd	r24, Y+1	; 0x01
    169c:	6a 81       	ldd	r22, Y+2	; 0x02
    169e:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <DIO_getPinval>
    16a2:	81 30       	cpi	r24, 0x01	; 1
    16a4:	29 f4       	brne	.+10     	; 0x16b0 <LED_toggle+0x24>
	{
		LED_off(PORTID, PINID);
    16a6:	89 81       	ldd	r24, Y+1	; 0x01
    16a8:	6a 81       	ldd	r22, Y+2	; 0x02
    16aa:	0e 94 35 0b 	call	0x166a	; 0x166a <LED_off>
    16ae:	0a c0       	rjmp	.+20     	; 0x16c4 <LED_toggle+0x38>
	}
	else if(DIO_getPinval(PORTID,PINID)==LOW)
    16b0:	89 81       	ldd	r24, Y+1	; 0x01
    16b2:	6a 81       	ldd	r22, Y+2	; 0x02
    16b4:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <DIO_getPinval>
    16b8:	88 23       	and	r24, r24
    16ba:	21 f4       	brne	.+8      	; 0x16c4 <LED_toggle+0x38>
	{
		LED_on(PORTID, PINID);
    16bc:	89 81       	ldd	r24, Y+1	; 0x01
    16be:	6a 81       	ldd	r22, Y+2	; 0x02
    16c0:	0e 94 24 0b 	call	0x1648	; 0x1648 <LED_on>
	}
}
    16c4:	0f 90       	pop	r0
    16c6:	0f 90       	pop	r0
    16c8:	cf 91       	pop	r28
    16ca:	df 91       	pop	r29
    16cc:	08 95       	ret

000016ce <LCD_init>:
 *      Author: abdelrahman
 */
#include "LCD_interface.h"
#include <util/delay.h>
void LCD_init()
{
    16ce:	df 93       	push	r29
    16d0:	cf 93       	push	r28
    16d2:	cd b7       	in	r28, 0x3d	; 61
    16d4:	de b7       	in	r29, 0x3e	; 62
    16d6:	e8 97       	sbiw	r28, 0x38	; 56
    16d8:	0f b6       	in	r0, 0x3f	; 63
    16da:	f8 94       	cli
    16dc:	de bf       	out	0x3e, r29	; 62
    16de:	0f be       	out	0x3f, r0	; 63
    16e0:	cd bf       	out	0x3d, r28	; 61
	DIO_setPinDir(LCD_Ctr_Port, LCD_RS_PIN, output);
    16e2:	81 e0       	ldi	r24, 0x01	; 1
    16e4:	61 e0       	ldi	r22, 0x01	; 1
    16e6:	41 e0       	ldi	r20, 0x01	; 1
    16e8:	0e 94 5e 06 	call	0xcbc	; 0xcbc <DIO_setPinDir>
	DIO_setPinDir(LCD_Ctr_Port, LCD_RW_PIN, output);
    16ec:	81 e0       	ldi	r24, 0x01	; 1
    16ee:	62 e0       	ldi	r22, 0x02	; 2
    16f0:	41 e0       	ldi	r20, 0x01	; 1
    16f2:	0e 94 5e 06 	call	0xcbc	; 0xcbc <DIO_setPinDir>
	DIO_setPinDir(LCD_Ctr_Port, LCD_EN_PIN, output);
    16f6:	81 e0       	ldi	r24, 0x01	; 1
    16f8:	63 e0       	ldi	r22, 0x03	; 3
    16fa:	41 e0       	ldi	r20, 0x01	; 1
    16fc:	0e 94 5e 06 	call	0xcbc	; 0xcbc <DIO_setPinDir>

	DIO_setPinDir(LCD_Data_Port, Data_PIN0, output);
    1700:	80 e0       	ldi	r24, 0x00	; 0
    1702:	64 e0       	ldi	r22, 0x04	; 4
    1704:	41 e0       	ldi	r20, 0x01	; 1
    1706:	0e 94 5e 06 	call	0xcbc	; 0xcbc <DIO_setPinDir>
	DIO_setPinDir(LCD_Data_Port, Data_PIN1, output);
    170a:	80 e0       	ldi	r24, 0x00	; 0
    170c:	65 e0       	ldi	r22, 0x05	; 5
    170e:	41 e0       	ldi	r20, 0x01	; 1
    1710:	0e 94 5e 06 	call	0xcbc	; 0xcbc <DIO_setPinDir>
	DIO_setPinDir(LCD_Data_Port, Data_PIN2, output);
    1714:	80 e0       	ldi	r24, 0x00	; 0
    1716:	66 e0       	ldi	r22, 0x06	; 6
    1718:	41 e0       	ldi	r20, 0x01	; 1
    171a:	0e 94 5e 06 	call	0xcbc	; 0xcbc <DIO_setPinDir>
	DIO_setPinDir(LCD_Data_Port, Data_PIN3, output);
    171e:	80 e0       	ldi	r24, 0x00	; 0
    1720:	67 e0       	ldi	r22, 0x07	; 7
    1722:	41 e0       	ldi	r20, 0x01	; 1
    1724:	0e 94 5e 06 	call	0xcbc	; 0xcbc <DIO_setPinDir>
    1728:	80 e0       	ldi	r24, 0x00	; 0
    172a:	90 e0       	ldi	r25, 0x00	; 0
    172c:	a8 e4       	ldi	r26, 0x48	; 72
    172e:	b2 e4       	ldi	r27, 0x42	; 66
    1730:	8d ab       	std	Y+53, r24	; 0x35
    1732:	9e ab       	std	Y+54, r25	; 0x36
    1734:	af ab       	std	Y+55, r26	; 0x37
    1736:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1738:	6d a9       	ldd	r22, Y+53	; 0x35
    173a:	7e a9       	ldd	r23, Y+54	; 0x36
    173c:	8f a9       	ldd	r24, Y+55	; 0x37
    173e:	98 ad       	ldd	r25, Y+56	; 0x38
    1740:	20 e0       	ldi	r18, 0x00	; 0
    1742:	30 e0       	ldi	r19, 0x00	; 0
    1744:	4a e7       	ldi	r20, 0x7A	; 122
    1746:	53 e4       	ldi	r21, 0x43	; 67
    1748:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    174c:	dc 01       	movw	r26, r24
    174e:	cb 01       	movw	r24, r22
    1750:	89 ab       	std	Y+49, r24	; 0x31
    1752:	9a ab       	std	Y+50, r25	; 0x32
    1754:	ab ab       	std	Y+51, r26	; 0x33
    1756:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1758:	69 a9       	ldd	r22, Y+49	; 0x31
    175a:	7a a9       	ldd	r23, Y+50	; 0x32
    175c:	8b a9       	ldd	r24, Y+51	; 0x33
    175e:	9c a9       	ldd	r25, Y+52	; 0x34
    1760:	20 e0       	ldi	r18, 0x00	; 0
    1762:	30 e0       	ldi	r19, 0x00	; 0
    1764:	40 e8       	ldi	r20, 0x80	; 128
    1766:	5f e3       	ldi	r21, 0x3F	; 63
    1768:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    176c:	88 23       	and	r24, r24
    176e:	2c f4       	brge	.+10     	; 0x177a <LCD_init+0xac>
		__ticks = 1;
    1770:	81 e0       	ldi	r24, 0x01	; 1
    1772:	90 e0       	ldi	r25, 0x00	; 0
    1774:	98 ab       	std	Y+48, r25	; 0x30
    1776:	8f a7       	std	Y+47, r24	; 0x2f
    1778:	3f c0       	rjmp	.+126    	; 0x17f8 <LCD_init+0x12a>
	else if (__tmp > 65535)
    177a:	69 a9       	ldd	r22, Y+49	; 0x31
    177c:	7a a9       	ldd	r23, Y+50	; 0x32
    177e:	8b a9       	ldd	r24, Y+51	; 0x33
    1780:	9c a9       	ldd	r25, Y+52	; 0x34
    1782:	20 e0       	ldi	r18, 0x00	; 0
    1784:	3f ef       	ldi	r19, 0xFF	; 255
    1786:	4f e7       	ldi	r20, 0x7F	; 127
    1788:	57 e4       	ldi	r21, 0x47	; 71
    178a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    178e:	18 16       	cp	r1, r24
    1790:	4c f5       	brge	.+82     	; 0x17e4 <LCD_init+0x116>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1792:	6d a9       	ldd	r22, Y+53	; 0x35
    1794:	7e a9       	ldd	r23, Y+54	; 0x36
    1796:	8f a9       	ldd	r24, Y+55	; 0x37
    1798:	98 ad       	ldd	r25, Y+56	; 0x38
    179a:	20 e0       	ldi	r18, 0x00	; 0
    179c:	30 e0       	ldi	r19, 0x00	; 0
    179e:	40 e2       	ldi	r20, 0x20	; 32
    17a0:	51 e4       	ldi	r21, 0x41	; 65
    17a2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17a6:	dc 01       	movw	r26, r24
    17a8:	cb 01       	movw	r24, r22
    17aa:	bc 01       	movw	r22, r24
    17ac:	cd 01       	movw	r24, r26
    17ae:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17b2:	dc 01       	movw	r26, r24
    17b4:	cb 01       	movw	r24, r22
    17b6:	98 ab       	std	Y+48, r25	; 0x30
    17b8:	8f a7       	std	Y+47, r24	; 0x2f
    17ba:	0f c0       	rjmp	.+30     	; 0x17da <LCD_init+0x10c>
    17bc:	89 e1       	ldi	r24, 0x19	; 25
    17be:	90 e0       	ldi	r25, 0x00	; 0
    17c0:	9e a7       	std	Y+46, r25	; 0x2e
    17c2:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    17c4:	8d a5       	ldd	r24, Y+45	; 0x2d
    17c6:	9e a5       	ldd	r25, Y+46	; 0x2e
    17c8:	01 97       	sbiw	r24, 0x01	; 1
    17ca:	f1 f7       	brne	.-4      	; 0x17c8 <LCD_init+0xfa>
    17cc:	9e a7       	std	Y+46, r25	; 0x2e
    17ce:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17d0:	8f a5       	ldd	r24, Y+47	; 0x2f
    17d2:	98 a9       	ldd	r25, Y+48	; 0x30
    17d4:	01 97       	sbiw	r24, 0x01	; 1
    17d6:	98 ab       	std	Y+48, r25	; 0x30
    17d8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17da:	8f a5       	ldd	r24, Y+47	; 0x2f
    17dc:	98 a9       	ldd	r25, Y+48	; 0x30
    17de:	00 97       	sbiw	r24, 0x00	; 0
    17e0:	69 f7       	brne	.-38     	; 0x17bc <LCD_init+0xee>
    17e2:	14 c0       	rjmp	.+40     	; 0x180c <LCD_init+0x13e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17e4:	69 a9       	ldd	r22, Y+49	; 0x31
    17e6:	7a a9       	ldd	r23, Y+50	; 0x32
    17e8:	8b a9       	ldd	r24, Y+51	; 0x33
    17ea:	9c a9       	ldd	r25, Y+52	; 0x34
    17ec:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17f0:	dc 01       	movw	r26, r24
    17f2:	cb 01       	movw	r24, r22
    17f4:	98 ab       	std	Y+48, r25	; 0x30
    17f6:	8f a7       	std	Y+47, r24	; 0x2f
    17f8:	8f a5       	ldd	r24, Y+47	; 0x2f
    17fa:	98 a9       	ldd	r25, Y+48	; 0x30
    17fc:	9c a7       	std	Y+44, r25	; 0x2c
    17fe:	8b a7       	std	Y+43, r24	; 0x2b
    1800:	8b a5       	ldd	r24, Y+43	; 0x2b
    1802:	9c a5       	ldd	r25, Y+44	; 0x2c
    1804:	01 97       	sbiw	r24, 0x01	; 1
    1806:	f1 f7       	brne	.-4      	; 0x1804 <LCD_init+0x136>
    1808:	9c a7       	std	Y+44, r25	; 0x2c
    180a:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(50);

	LCD_CMD(LCD_RETURN_HOME);
    180c:	82 e0       	ldi	r24, 0x02	; 2
    180e:	0e 94 77 0d 	call	0x1aee	; 0x1aee <LCD_CMD>
	LCD_CMD(LCD_4BIT_MODE_2LINES_5X7);
    1812:	88 e2       	ldi	r24, 0x28	; 40
    1814:	0e 94 77 0d 	call	0x1aee	; 0x1aee <LCD_CMD>
    1818:	80 e0       	ldi	r24, 0x00	; 0
    181a:	90 e0       	ldi	r25, 0x00	; 0
    181c:	a0 e8       	ldi	r26, 0x80	; 128
    181e:	bf e3       	ldi	r27, 0x3F	; 63
    1820:	8f a3       	std	Y+39, r24	; 0x27
    1822:	98 a7       	std	Y+40, r25	; 0x28
    1824:	a9 a7       	std	Y+41, r26	; 0x29
    1826:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1828:	6f a1       	ldd	r22, Y+39	; 0x27
    182a:	78 a5       	ldd	r23, Y+40	; 0x28
    182c:	89 a5       	ldd	r24, Y+41	; 0x29
    182e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1830:	20 e0       	ldi	r18, 0x00	; 0
    1832:	30 e0       	ldi	r19, 0x00	; 0
    1834:	4a e7       	ldi	r20, 0x7A	; 122
    1836:	53 e4       	ldi	r21, 0x43	; 67
    1838:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    183c:	dc 01       	movw	r26, r24
    183e:	cb 01       	movw	r24, r22
    1840:	8b a3       	std	Y+35, r24	; 0x23
    1842:	9c a3       	std	Y+36, r25	; 0x24
    1844:	ad a3       	std	Y+37, r26	; 0x25
    1846:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1848:	6b a1       	ldd	r22, Y+35	; 0x23
    184a:	7c a1       	ldd	r23, Y+36	; 0x24
    184c:	8d a1       	ldd	r24, Y+37	; 0x25
    184e:	9e a1       	ldd	r25, Y+38	; 0x26
    1850:	20 e0       	ldi	r18, 0x00	; 0
    1852:	30 e0       	ldi	r19, 0x00	; 0
    1854:	40 e8       	ldi	r20, 0x80	; 128
    1856:	5f e3       	ldi	r21, 0x3F	; 63
    1858:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    185c:	88 23       	and	r24, r24
    185e:	2c f4       	brge	.+10     	; 0x186a <LCD_init+0x19c>
		__ticks = 1;
    1860:	81 e0       	ldi	r24, 0x01	; 1
    1862:	90 e0       	ldi	r25, 0x00	; 0
    1864:	9a a3       	std	Y+34, r25	; 0x22
    1866:	89 a3       	std	Y+33, r24	; 0x21
    1868:	3f c0       	rjmp	.+126    	; 0x18e8 <LCD_init+0x21a>
	else if (__tmp > 65535)
    186a:	6b a1       	ldd	r22, Y+35	; 0x23
    186c:	7c a1       	ldd	r23, Y+36	; 0x24
    186e:	8d a1       	ldd	r24, Y+37	; 0x25
    1870:	9e a1       	ldd	r25, Y+38	; 0x26
    1872:	20 e0       	ldi	r18, 0x00	; 0
    1874:	3f ef       	ldi	r19, 0xFF	; 255
    1876:	4f e7       	ldi	r20, 0x7F	; 127
    1878:	57 e4       	ldi	r21, 0x47	; 71
    187a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    187e:	18 16       	cp	r1, r24
    1880:	4c f5       	brge	.+82     	; 0x18d4 <LCD_init+0x206>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1882:	6f a1       	ldd	r22, Y+39	; 0x27
    1884:	78 a5       	ldd	r23, Y+40	; 0x28
    1886:	89 a5       	ldd	r24, Y+41	; 0x29
    1888:	9a a5       	ldd	r25, Y+42	; 0x2a
    188a:	20 e0       	ldi	r18, 0x00	; 0
    188c:	30 e0       	ldi	r19, 0x00	; 0
    188e:	40 e2       	ldi	r20, 0x20	; 32
    1890:	51 e4       	ldi	r21, 0x41	; 65
    1892:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1896:	dc 01       	movw	r26, r24
    1898:	cb 01       	movw	r24, r22
    189a:	bc 01       	movw	r22, r24
    189c:	cd 01       	movw	r24, r26
    189e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18a2:	dc 01       	movw	r26, r24
    18a4:	cb 01       	movw	r24, r22
    18a6:	9a a3       	std	Y+34, r25	; 0x22
    18a8:	89 a3       	std	Y+33, r24	; 0x21
    18aa:	0f c0       	rjmp	.+30     	; 0x18ca <LCD_init+0x1fc>
    18ac:	89 e1       	ldi	r24, 0x19	; 25
    18ae:	90 e0       	ldi	r25, 0x00	; 0
    18b0:	98 a3       	std	Y+32, r25	; 0x20
    18b2:	8f 8f       	std	Y+31, r24	; 0x1f
    18b4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    18b6:	98 a1       	ldd	r25, Y+32	; 0x20
    18b8:	01 97       	sbiw	r24, 0x01	; 1
    18ba:	f1 f7       	brne	.-4      	; 0x18b8 <LCD_init+0x1ea>
    18bc:	98 a3       	std	Y+32, r25	; 0x20
    18be:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18c0:	89 a1       	ldd	r24, Y+33	; 0x21
    18c2:	9a a1       	ldd	r25, Y+34	; 0x22
    18c4:	01 97       	sbiw	r24, 0x01	; 1
    18c6:	9a a3       	std	Y+34, r25	; 0x22
    18c8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18ca:	89 a1       	ldd	r24, Y+33	; 0x21
    18cc:	9a a1       	ldd	r25, Y+34	; 0x22
    18ce:	00 97       	sbiw	r24, 0x00	; 0
    18d0:	69 f7       	brne	.-38     	; 0x18ac <LCD_init+0x1de>
    18d2:	14 c0       	rjmp	.+40     	; 0x18fc <LCD_init+0x22e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18d4:	6b a1       	ldd	r22, Y+35	; 0x23
    18d6:	7c a1       	ldd	r23, Y+36	; 0x24
    18d8:	8d a1       	ldd	r24, Y+37	; 0x25
    18da:	9e a1       	ldd	r25, Y+38	; 0x26
    18dc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18e0:	dc 01       	movw	r26, r24
    18e2:	cb 01       	movw	r24, r22
    18e4:	9a a3       	std	Y+34, r25	; 0x22
    18e6:	89 a3       	std	Y+33, r24	; 0x21
    18e8:	89 a1       	ldd	r24, Y+33	; 0x21
    18ea:	9a a1       	ldd	r25, Y+34	; 0x22
    18ec:	9e 8f       	std	Y+30, r25	; 0x1e
    18ee:	8d 8f       	std	Y+29, r24	; 0x1d
    18f0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    18f2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    18f4:	01 97       	sbiw	r24, 0x01	; 1
    18f6:	f1 f7       	brne	.-4      	; 0x18f4 <LCD_init+0x226>
    18f8:	9e 8f       	std	Y+30, r25	; 0x1e
    18fa:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	LCD_CMD(LCD_ON_CURSOR_OFF);
    18fc:	8c e0       	ldi	r24, 0x0C	; 12
    18fe:	0e 94 77 0d 	call	0x1aee	; 0x1aee <LCD_CMD>
    1902:	80 e0       	ldi	r24, 0x00	; 0
    1904:	90 e0       	ldi	r25, 0x00	; 0
    1906:	a0 e8       	ldi	r26, 0x80	; 128
    1908:	bf e3       	ldi	r27, 0x3F	; 63
    190a:	89 8f       	std	Y+25, r24	; 0x19
    190c:	9a 8f       	std	Y+26, r25	; 0x1a
    190e:	ab 8f       	std	Y+27, r26	; 0x1b
    1910:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1912:	69 8d       	ldd	r22, Y+25	; 0x19
    1914:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1916:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1918:	9c 8d       	ldd	r25, Y+28	; 0x1c
    191a:	20 e0       	ldi	r18, 0x00	; 0
    191c:	30 e0       	ldi	r19, 0x00	; 0
    191e:	4a e7       	ldi	r20, 0x7A	; 122
    1920:	53 e4       	ldi	r21, 0x43	; 67
    1922:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1926:	dc 01       	movw	r26, r24
    1928:	cb 01       	movw	r24, r22
    192a:	8d 8b       	std	Y+21, r24	; 0x15
    192c:	9e 8b       	std	Y+22, r25	; 0x16
    192e:	af 8b       	std	Y+23, r26	; 0x17
    1930:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1932:	6d 89       	ldd	r22, Y+21	; 0x15
    1934:	7e 89       	ldd	r23, Y+22	; 0x16
    1936:	8f 89       	ldd	r24, Y+23	; 0x17
    1938:	98 8d       	ldd	r25, Y+24	; 0x18
    193a:	20 e0       	ldi	r18, 0x00	; 0
    193c:	30 e0       	ldi	r19, 0x00	; 0
    193e:	40 e8       	ldi	r20, 0x80	; 128
    1940:	5f e3       	ldi	r21, 0x3F	; 63
    1942:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1946:	88 23       	and	r24, r24
    1948:	2c f4       	brge	.+10     	; 0x1954 <LCD_init+0x286>
		__ticks = 1;
    194a:	81 e0       	ldi	r24, 0x01	; 1
    194c:	90 e0       	ldi	r25, 0x00	; 0
    194e:	9c 8b       	std	Y+20, r25	; 0x14
    1950:	8b 8b       	std	Y+19, r24	; 0x13
    1952:	3f c0       	rjmp	.+126    	; 0x19d2 <LCD_init+0x304>
	else if (__tmp > 65535)
    1954:	6d 89       	ldd	r22, Y+21	; 0x15
    1956:	7e 89       	ldd	r23, Y+22	; 0x16
    1958:	8f 89       	ldd	r24, Y+23	; 0x17
    195a:	98 8d       	ldd	r25, Y+24	; 0x18
    195c:	20 e0       	ldi	r18, 0x00	; 0
    195e:	3f ef       	ldi	r19, 0xFF	; 255
    1960:	4f e7       	ldi	r20, 0x7F	; 127
    1962:	57 e4       	ldi	r21, 0x47	; 71
    1964:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1968:	18 16       	cp	r1, r24
    196a:	4c f5       	brge	.+82     	; 0x19be <LCD_init+0x2f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    196c:	69 8d       	ldd	r22, Y+25	; 0x19
    196e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1970:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1972:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1974:	20 e0       	ldi	r18, 0x00	; 0
    1976:	30 e0       	ldi	r19, 0x00	; 0
    1978:	40 e2       	ldi	r20, 0x20	; 32
    197a:	51 e4       	ldi	r21, 0x41	; 65
    197c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1980:	dc 01       	movw	r26, r24
    1982:	cb 01       	movw	r24, r22
    1984:	bc 01       	movw	r22, r24
    1986:	cd 01       	movw	r24, r26
    1988:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    198c:	dc 01       	movw	r26, r24
    198e:	cb 01       	movw	r24, r22
    1990:	9c 8b       	std	Y+20, r25	; 0x14
    1992:	8b 8b       	std	Y+19, r24	; 0x13
    1994:	0f c0       	rjmp	.+30     	; 0x19b4 <LCD_init+0x2e6>
    1996:	89 e1       	ldi	r24, 0x19	; 25
    1998:	90 e0       	ldi	r25, 0x00	; 0
    199a:	9a 8b       	std	Y+18, r25	; 0x12
    199c:	89 8b       	std	Y+17, r24	; 0x11
    199e:	89 89       	ldd	r24, Y+17	; 0x11
    19a0:	9a 89       	ldd	r25, Y+18	; 0x12
    19a2:	01 97       	sbiw	r24, 0x01	; 1
    19a4:	f1 f7       	brne	.-4      	; 0x19a2 <LCD_init+0x2d4>
    19a6:	9a 8b       	std	Y+18, r25	; 0x12
    19a8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19aa:	8b 89       	ldd	r24, Y+19	; 0x13
    19ac:	9c 89       	ldd	r25, Y+20	; 0x14
    19ae:	01 97       	sbiw	r24, 0x01	; 1
    19b0:	9c 8b       	std	Y+20, r25	; 0x14
    19b2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19b4:	8b 89       	ldd	r24, Y+19	; 0x13
    19b6:	9c 89       	ldd	r25, Y+20	; 0x14
    19b8:	00 97       	sbiw	r24, 0x00	; 0
    19ba:	69 f7       	brne	.-38     	; 0x1996 <LCD_init+0x2c8>
    19bc:	14 c0       	rjmp	.+40     	; 0x19e6 <LCD_init+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19be:	6d 89       	ldd	r22, Y+21	; 0x15
    19c0:	7e 89       	ldd	r23, Y+22	; 0x16
    19c2:	8f 89       	ldd	r24, Y+23	; 0x17
    19c4:	98 8d       	ldd	r25, Y+24	; 0x18
    19c6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19ca:	dc 01       	movw	r26, r24
    19cc:	cb 01       	movw	r24, r22
    19ce:	9c 8b       	std	Y+20, r25	; 0x14
    19d0:	8b 8b       	std	Y+19, r24	; 0x13
    19d2:	8b 89       	ldd	r24, Y+19	; 0x13
    19d4:	9c 89       	ldd	r25, Y+20	; 0x14
    19d6:	98 8b       	std	Y+16, r25	; 0x10
    19d8:	8f 87       	std	Y+15, r24	; 0x0f
    19da:	8f 85       	ldd	r24, Y+15	; 0x0f
    19dc:	98 89       	ldd	r25, Y+16	; 0x10
    19de:	01 97       	sbiw	r24, 0x01	; 1
    19e0:	f1 f7       	brne	.-4      	; 0x19de <LCD_init+0x310>
    19e2:	98 8b       	std	Y+16, r25	; 0x10
    19e4:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);

	LCD_CMD(LCD_CLEAR_SCREEN);
    19e6:	81 e0       	ldi	r24, 0x01	; 1
    19e8:	0e 94 77 0d 	call	0x1aee	; 0x1aee <LCD_CMD>
    19ec:	80 e0       	ldi	r24, 0x00	; 0
    19ee:	90 e0       	ldi	r25, 0x00	; 0
    19f0:	a0 ea       	ldi	r26, 0xA0	; 160
    19f2:	b1 e4       	ldi	r27, 0x41	; 65
    19f4:	8b 87       	std	Y+11, r24	; 0x0b
    19f6:	9c 87       	std	Y+12, r25	; 0x0c
    19f8:	ad 87       	std	Y+13, r26	; 0x0d
    19fa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19fc:	6b 85       	ldd	r22, Y+11	; 0x0b
    19fe:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a00:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a02:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a04:	20 e0       	ldi	r18, 0x00	; 0
    1a06:	30 e0       	ldi	r19, 0x00	; 0
    1a08:	4a e7       	ldi	r20, 0x7A	; 122
    1a0a:	53 e4       	ldi	r21, 0x43	; 67
    1a0c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a10:	dc 01       	movw	r26, r24
    1a12:	cb 01       	movw	r24, r22
    1a14:	8f 83       	std	Y+7, r24	; 0x07
    1a16:	98 87       	std	Y+8, r25	; 0x08
    1a18:	a9 87       	std	Y+9, r26	; 0x09
    1a1a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a1c:	6f 81       	ldd	r22, Y+7	; 0x07
    1a1e:	78 85       	ldd	r23, Y+8	; 0x08
    1a20:	89 85       	ldd	r24, Y+9	; 0x09
    1a22:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a24:	20 e0       	ldi	r18, 0x00	; 0
    1a26:	30 e0       	ldi	r19, 0x00	; 0
    1a28:	40 e8       	ldi	r20, 0x80	; 128
    1a2a:	5f e3       	ldi	r21, 0x3F	; 63
    1a2c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1a30:	88 23       	and	r24, r24
    1a32:	2c f4       	brge	.+10     	; 0x1a3e <LCD_init+0x370>
		__ticks = 1;
    1a34:	81 e0       	ldi	r24, 0x01	; 1
    1a36:	90 e0       	ldi	r25, 0x00	; 0
    1a38:	9e 83       	std	Y+6, r25	; 0x06
    1a3a:	8d 83       	std	Y+5, r24	; 0x05
    1a3c:	3f c0       	rjmp	.+126    	; 0x1abc <LCD_init+0x3ee>
	else if (__tmp > 65535)
    1a3e:	6f 81       	ldd	r22, Y+7	; 0x07
    1a40:	78 85       	ldd	r23, Y+8	; 0x08
    1a42:	89 85       	ldd	r24, Y+9	; 0x09
    1a44:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a46:	20 e0       	ldi	r18, 0x00	; 0
    1a48:	3f ef       	ldi	r19, 0xFF	; 255
    1a4a:	4f e7       	ldi	r20, 0x7F	; 127
    1a4c:	57 e4       	ldi	r21, 0x47	; 71
    1a4e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1a52:	18 16       	cp	r1, r24
    1a54:	4c f5       	brge	.+82     	; 0x1aa8 <LCD_init+0x3da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a56:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a58:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a5a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a5c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a5e:	20 e0       	ldi	r18, 0x00	; 0
    1a60:	30 e0       	ldi	r19, 0x00	; 0
    1a62:	40 e2       	ldi	r20, 0x20	; 32
    1a64:	51 e4       	ldi	r21, 0x41	; 65
    1a66:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a6a:	dc 01       	movw	r26, r24
    1a6c:	cb 01       	movw	r24, r22
    1a6e:	bc 01       	movw	r22, r24
    1a70:	cd 01       	movw	r24, r26
    1a72:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a76:	dc 01       	movw	r26, r24
    1a78:	cb 01       	movw	r24, r22
    1a7a:	9e 83       	std	Y+6, r25	; 0x06
    1a7c:	8d 83       	std	Y+5, r24	; 0x05
    1a7e:	0f c0       	rjmp	.+30     	; 0x1a9e <LCD_init+0x3d0>
    1a80:	89 e1       	ldi	r24, 0x19	; 25
    1a82:	90 e0       	ldi	r25, 0x00	; 0
    1a84:	9c 83       	std	Y+4, r25	; 0x04
    1a86:	8b 83       	std	Y+3, r24	; 0x03
    1a88:	8b 81       	ldd	r24, Y+3	; 0x03
    1a8a:	9c 81       	ldd	r25, Y+4	; 0x04
    1a8c:	01 97       	sbiw	r24, 0x01	; 1
    1a8e:	f1 f7       	brne	.-4      	; 0x1a8c <LCD_init+0x3be>
    1a90:	9c 83       	std	Y+4, r25	; 0x04
    1a92:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a94:	8d 81       	ldd	r24, Y+5	; 0x05
    1a96:	9e 81       	ldd	r25, Y+6	; 0x06
    1a98:	01 97       	sbiw	r24, 0x01	; 1
    1a9a:	9e 83       	std	Y+6, r25	; 0x06
    1a9c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a9e:	8d 81       	ldd	r24, Y+5	; 0x05
    1aa0:	9e 81       	ldd	r25, Y+6	; 0x06
    1aa2:	00 97       	sbiw	r24, 0x00	; 0
    1aa4:	69 f7       	brne	.-38     	; 0x1a80 <LCD_init+0x3b2>
    1aa6:	14 c0       	rjmp	.+40     	; 0x1ad0 <LCD_init+0x402>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1aa8:	6f 81       	ldd	r22, Y+7	; 0x07
    1aaa:	78 85       	ldd	r23, Y+8	; 0x08
    1aac:	89 85       	ldd	r24, Y+9	; 0x09
    1aae:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ab0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ab4:	dc 01       	movw	r26, r24
    1ab6:	cb 01       	movw	r24, r22
    1ab8:	9e 83       	std	Y+6, r25	; 0x06
    1aba:	8d 83       	std	Y+5, r24	; 0x05
    1abc:	8d 81       	ldd	r24, Y+5	; 0x05
    1abe:	9e 81       	ldd	r25, Y+6	; 0x06
    1ac0:	9a 83       	std	Y+2, r25	; 0x02
    1ac2:	89 83       	std	Y+1, r24	; 0x01
    1ac4:	89 81       	ldd	r24, Y+1	; 0x01
    1ac6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ac8:	01 97       	sbiw	r24, 0x01	; 1
    1aca:	f1 f7       	brne	.-4      	; 0x1ac8 <LCD_init+0x3fa>
    1acc:	9a 83       	std	Y+2, r25	; 0x02
    1ace:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);

	LCD_CMD(LCD_SHIFT_CURSOR_RIGHT);
    1ad0:	86 e0       	ldi	r24, 0x06	; 6
    1ad2:	0e 94 77 0d 	call	0x1aee	; 0x1aee <LCD_CMD>
	LCD_CMD(LCD_SET_CURSOR_1LINE);
    1ad6:	80 e8       	ldi	r24, 0x80	; 128
    1ad8:	0e 94 77 0d 	call	0x1aee	; 0x1aee <LCD_CMD>
}
    1adc:	e8 96       	adiw	r28, 0x38	; 56
    1ade:	0f b6       	in	r0, 0x3f	; 63
    1ae0:	f8 94       	cli
    1ae2:	de bf       	out	0x3e, r29	; 62
    1ae4:	0f be       	out	0x3f, r0	; 63
    1ae6:	cd bf       	out	0x3d, r28	; 61
    1ae8:	cf 91       	pop	r28
    1aea:	df 91       	pop	r29
    1aec:	08 95       	ret

00001aee <LCD_CMD>:

void LCD_CMD(u8 CMD)
{
    1aee:	df 93       	push	r29
    1af0:	cf 93       	push	r28
    1af2:	cd b7       	in	r28, 0x3d	; 61
    1af4:	de b7       	in	r29, 0x3e	; 62
    1af6:	2f 97       	sbiw	r28, 0x0f	; 15
    1af8:	0f b6       	in	r0, 0x3f	; 63
    1afa:	f8 94       	cli
    1afc:	de bf       	out	0x3e, r29	; 62
    1afe:	0f be       	out	0x3f, r0	; 63
    1b00:	cd bf       	out	0x3d, r28	; 61
    1b02:	8f 87       	std	Y+15, r24	; 0x0f
	/***************active LCD to take command**************/
	DIO_setPinval(LCD_Ctr_Port, LCD_RS_PIN, LOW);
    1b04:	81 e0       	ldi	r24, 0x01	; 1
    1b06:	61 e0       	ldi	r22, 0x01	; 1
    1b08:	40 e0       	ldi	r20, 0x00	; 0
    1b0a:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <DIO_setPinval>
	DIO_setPinval(LCD_Ctr_Port, LCD_RW_PIN, LOW);
    1b0e:	81 e0       	ldi	r24, 0x01	; 1
    1b10:	62 e0       	ldi	r22, 0x02	; 2
    1b12:	40 e0       	ldi	r20, 0x00	; 0
    1b14:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <DIO_setPinval>
	/**************higher bits command**************/
	PORTA=(PORTA & 0x0f)|(CMD & 0xf0);
    1b18:	ab e3       	ldi	r26, 0x3B	; 59
    1b1a:	b0 e0       	ldi	r27, 0x00	; 0
    1b1c:	eb e3       	ldi	r30, 0x3B	; 59
    1b1e:	f0 e0       	ldi	r31, 0x00	; 0
    1b20:	80 81       	ld	r24, Z
    1b22:	98 2f       	mov	r25, r24
    1b24:	9f 70       	andi	r25, 0x0F	; 15
    1b26:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b28:	80 7f       	andi	r24, 0xF0	; 240
    1b2a:	89 2b       	or	r24, r25
    1b2c:	8c 93       	st	X, r24
	LCD_ENABLE();
    1b2e:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <LCD_ENABLE>
	/**************lower bits command**************/
	PORTA=(PORTA & 0x0f)|(CMD << 4);
    1b32:	ab e3       	ldi	r26, 0x3B	; 59
    1b34:	b0 e0       	ldi	r27, 0x00	; 0
    1b36:	eb e3       	ldi	r30, 0x3B	; 59
    1b38:	f0 e0       	ldi	r31, 0x00	; 0
    1b3a:	80 81       	ld	r24, Z
    1b3c:	28 2f       	mov	r18, r24
    1b3e:	2f 70       	andi	r18, 0x0F	; 15
    1b40:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b42:	88 2f       	mov	r24, r24
    1b44:	90 e0       	ldi	r25, 0x00	; 0
    1b46:	82 95       	swap	r24
    1b48:	92 95       	swap	r25
    1b4a:	90 7f       	andi	r25, 0xF0	; 240
    1b4c:	98 27       	eor	r25, r24
    1b4e:	80 7f       	andi	r24, 0xF0	; 240
    1b50:	98 27       	eor	r25, r24
    1b52:	82 2b       	or	r24, r18
    1b54:	8c 93       	st	X, r24
	LCD_ENABLE();
    1b56:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <LCD_ENABLE>
    1b5a:	80 e0       	ldi	r24, 0x00	; 0
    1b5c:	90 e0       	ldi	r25, 0x00	; 0
    1b5e:	a0 e0       	ldi	r26, 0x00	; 0
    1b60:	b0 e4       	ldi	r27, 0x40	; 64
    1b62:	8b 87       	std	Y+11, r24	; 0x0b
    1b64:	9c 87       	std	Y+12, r25	; 0x0c
    1b66:	ad 87       	std	Y+13, r26	; 0x0d
    1b68:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b6a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b6c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b6e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b70:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b72:	20 e0       	ldi	r18, 0x00	; 0
    1b74:	30 e0       	ldi	r19, 0x00	; 0
    1b76:	4a e7       	ldi	r20, 0x7A	; 122
    1b78:	53 e4       	ldi	r21, 0x43	; 67
    1b7a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b7e:	dc 01       	movw	r26, r24
    1b80:	cb 01       	movw	r24, r22
    1b82:	8f 83       	std	Y+7, r24	; 0x07
    1b84:	98 87       	std	Y+8, r25	; 0x08
    1b86:	a9 87       	std	Y+9, r26	; 0x09
    1b88:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b8a:	6f 81       	ldd	r22, Y+7	; 0x07
    1b8c:	78 85       	ldd	r23, Y+8	; 0x08
    1b8e:	89 85       	ldd	r24, Y+9	; 0x09
    1b90:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b92:	20 e0       	ldi	r18, 0x00	; 0
    1b94:	30 e0       	ldi	r19, 0x00	; 0
    1b96:	40 e8       	ldi	r20, 0x80	; 128
    1b98:	5f e3       	ldi	r21, 0x3F	; 63
    1b9a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1b9e:	88 23       	and	r24, r24
    1ba0:	2c f4       	brge	.+10     	; 0x1bac <LCD_CMD+0xbe>
		__ticks = 1;
    1ba2:	81 e0       	ldi	r24, 0x01	; 1
    1ba4:	90 e0       	ldi	r25, 0x00	; 0
    1ba6:	9e 83       	std	Y+6, r25	; 0x06
    1ba8:	8d 83       	std	Y+5, r24	; 0x05
    1baa:	3f c0       	rjmp	.+126    	; 0x1c2a <LCD_CMD+0x13c>
	else if (__tmp > 65535)
    1bac:	6f 81       	ldd	r22, Y+7	; 0x07
    1bae:	78 85       	ldd	r23, Y+8	; 0x08
    1bb0:	89 85       	ldd	r24, Y+9	; 0x09
    1bb2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bb4:	20 e0       	ldi	r18, 0x00	; 0
    1bb6:	3f ef       	ldi	r19, 0xFF	; 255
    1bb8:	4f e7       	ldi	r20, 0x7F	; 127
    1bba:	57 e4       	ldi	r21, 0x47	; 71
    1bbc:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1bc0:	18 16       	cp	r1, r24
    1bc2:	4c f5       	brge	.+82     	; 0x1c16 <LCD_CMD+0x128>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bc4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bc6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bc8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bca:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bcc:	20 e0       	ldi	r18, 0x00	; 0
    1bce:	30 e0       	ldi	r19, 0x00	; 0
    1bd0:	40 e2       	ldi	r20, 0x20	; 32
    1bd2:	51 e4       	ldi	r21, 0x41	; 65
    1bd4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1bd8:	dc 01       	movw	r26, r24
    1bda:	cb 01       	movw	r24, r22
    1bdc:	bc 01       	movw	r22, r24
    1bde:	cd 01       	movw	r24, r26
    1be0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1be4:	dc 01       	movw	r26, r24
    1be6:	cb 01       	movw	r24, r22
    1be8:	9e 83       	std	Y+6, r25	; 0x06
    1bea:	8d 83       	std	Y+5, r24	; 0x05
    1bec:	0f c0       	rjmp	.+30     	; 0x1c0c <LCD_CMD+0x11e>
    1bee:	89 e1       	ldi	r24, 0x19	; 25
    1bf0:	90 e0       	ldi	r25, 0x00	; 0
    1bf2:	9c 83       	std	Y+4, r25	; 0x04
    1bf4:	8b 83       	std	Y+3, r24	; 0x03
    1bf6:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf8:	9c 81       	ldd	r25, Y+4	; 0x04
    1bfa:	01 97       	sbiw	r24, 0x01	; 1
    1bfc:	f1 f7       	brne	.-4      	; 0x1bfa <LCD_CMD+0x10c>
    1bfe:	9c 83       	std	Y+4, r25	; 0x04
    1c00:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c02:	8d 81       	ldd	r24, Y+5	; 0x05
    1c04:	9e 81       	ldd	r25, Y+6	; 0x06
    1c06:	01 97       	sbiw	r24, 0x01	; 1
    1c08:	9e 83       	std	Y+6, r25	; 0x06
    1c0a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c0c:	8d 81       	ldd	r24, Y+5	; 0x05
    1c0e:	9e 81       	ldd	r25, Y+6	; 0x06
    1c10:	00 97       	sbiw	r24, 0x00	; 0
    1c12:	69 f7       	brne	.-38     	; 0x1bee <LCD_CMD+0x100>
    1c14:	14 c0       	rjmp	.+40     	; 0x1c3e <LCD_CMD+0x150>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c16:	6f 81       	ldd	r22, Y+7	; 0x07
    1c18:	78 85       	ldd	r23, Y+8	; 0x08
    1c1a:	89 85       	ldd	r24, Y+9	; 0x09
    1c1c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c1e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c22:	dc 01       	movw	r26, r24
    1c24:	cb 01       	movw	r24, r22
    1c26:	9e 83       	std	Y+6, r25	; 0x06
    1c28:	8d 83       	std	Y+5, r24	; 0x05
    1c2a:	8d 81       	ldd	r24, Y+5	; 0x05
    1c2c:	9e 81       	ldd	r25, Y+6	; 0x06
    1c2e:	9a 83       	std	Y+2, r25	; 0x02
    1c30:	89 83       	std	Y+1, r24	; 0x01
    1c32:	89 81       	ldd	r24, Y+1	; 0x01
    1c34:	9a 81       	ldd	r25, Y+2	; 0x02
    1c36:	01 97       	sbiw	r24, 0x01	; 1
    1c38:	f1 f7       	brne	.-4      	; 0x1c36 <LCD_CMD+0x148>
    1c3a:	9a 83       	std	Y+2, r25	; 0x02
    1c3c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    1c3e:	2f 96       	adiw	r28, 0x0f	; 15
    1c40:	0f b6       	in	r0, 0x3f	; 63
    1c42:	f8 94       	cli
    1c44:	de bf       	out	0x3e, r29	; 62
    1c46:	0f be       	out	0x3f, r0	; 63
    1c48:	cd bf       	out	0x3d, r28	; 61
    1c4a:	cf 91       	pop	r28
    1c4c:	df 91       	pop	r29
    1c4e:	08 95       	ret

00001c50 <LCD_Data>:

void LCD_Data(u8 Data)
{
    1c50:	df 93       	push	r29
    1c52:	cf 93       	push	r28
    1c54:	cd b7       	in	r28, 0x3d	; 61
    1c56:	de b7       	in	r29, 0x3e	; 62
    1c58:	2f 97       	sbiw	r28, 0x0f	; 15
    1c5a:	0f b6       	in	r0, 0x3f	; 63
    1c5c:	f8 94       	cli
    1c5e:	de bf       	out	0x3e, r29	; 62
    1c60:	0f be       	out	0x3f, r0	; 63
    1c62:	cd bf       	out	0x3d, r28	; 61
    1c64:	8f 87       	std	Y+15, r24	; 0x0f
	/***************active LCD to take Data**************/
		DIO_setPinval(LCD_Ctr_Port, LCD_RS_PIN, HIGH);
    1c66:	81 e0       	ldi	r24, 0x01	; 1
    1c68:	61 e0       	ldi	r22, 0x01	; 1
    1c6a:	41 e0       	ldi	r20, 0x01	; 1
    1c6c:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <DIO_setPinval>
		DIO_setPinval(LCD_Ctr_Port, LCD_RW_PIN, LOW);
    1c70:	81 e0       	ldi	r24, 0x01	; 1
    1c72:	62 e0       	ldi	r22, 0x02	; 2
    1c74:	40 e0       	ldi	r20, 0x00	; 0
    1c76:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <DIO_setPinval>
		/**************higher bits data**************/
		PORTA=(PORTA & 0x0f)|(Data & 0xf0);
    1c7a:	ab e3       	ldi	r26, 0x3B	; 59
    1c7c:	b0 e0       	ldi	r27, 0x00	; 0
    1c7e:	eb e3       	ldi	r30, 0x3B	; 59
    1c80:	f0 e0       	ldi	r31, 0x00	; 0
    1c82:	80 81       	ld	r24, Z
    1c84:	98 2f       	mov	r25, r24
    1c86:	9f 70       	andi	r25, 0x0F	; 15
    1c88:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c8a:	80 7f       	andi	r24, 0xF0	; 240
    1c8c:	89 2b       	or	r24, r25
    1c8e:	8c 93       	st	X, r24
		LCD_ENABLE();
    1c90:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <LCD_ENABLE>
		/**************lower bits data**************/
		PORTA=(PORTA & 0x0f)|(Data << 4);
    1c94:	ab e3       	ldi	r26, 0x3B	; 59
    1c96:	b0 e0       	ldi	r27, 0x00	; 0
    1c98:	eb e3       	ldi	r30, 0x3B	; 59
    1c9a:	f0 e0       	ldi	r31, 0x00	; 0
    1c9c:	80 81       	ld	r24, Z
    1c9e:	28 2f       	mov	r18, r24
    1ca0:	2f 70       	andi	r18, 0x0F	; 15
    1ca2:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ca4:	88 2f       	mov	r24, r24
    1ca6:	90 e0       	ldi	r25, 0x00	; 0
    1ca8:	82 95       	swap	r24
    1caa:	92 95       	swap	r25
    1cac:	90 7f       	andi	r25, 0xF0	; 240
    1cae:	98 27       	eor	r25, r24
    1cb0:	80 7f       	andi	r24, 0xF0	; 240
    1cb2:	98 27       	eor	r25, r24
    1cb4:	82 2b       	or	r24, r18
    1cb6:	8c 93       	st	X, r24
			LCD_ENABLE();
    1cb8:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <LCD_ENABLE>
    1cbc:	80 e0       	ldi	r24, 0x00	; 0
    1cbe:	90 e0       	ldi	r25, 0x00	; 0
    1cc0:	a0 ea       	ldi	r26, 0xA0	; 160
    1cc2:	b1 e4       	ldi	r27, 0x41	; 65
    1cc4:	8b 87       	std	Y+11, r24	; 0x0b
    1cc6:	9c 87       	std	Y+12, r25	; 0x0c
    1cc8:	ad 87       	std	Y+13, r26	; 0x0d
    1cca:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ccc:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cce:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cd0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cd2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cd4:	20 e0       	ldi	r18, 0x00	; 0
    1cd6:	30 e0       	ldi	r19, 0x00	; 0
    1cd8:	4a e7       	ldi	r20, 0x7A	; 122
    1cda:	53 e4       	ldi	r21, 0x43	; 67
    1cdc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ce0:	dc 01       	movw	r26, r24
    1ce2:	cb 01       	movw	r24, r22
    1ce4:	8f 83       	std	Y+7, r24	; 0x07
    1ce6:	98 87       	std	Y+8, r25	; 0x08
    1ce8:	a9 87       	std	Y+9, r26	; 0x09
    1cea:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1cec:	6f 81       	ldd	r22, Y+7	; 0x07
    1cee:	78 85       	ldd	r23, Y+8	; 0x08
    1cf0:	89 85       	ldd	r24, Y+9	; 0x09
    1cf2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cf4:	20 e0       	ldi	r18, 0x00	; 0
    1cf6:	30 e0       	ldi	r19, 0x00	; 0
    1cf8:	40 e8       	ldi	r20, 0x80	; 128
    1cfa:	5f e3       	ldi	r21, 0x3F	; 63
    1cfc:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1d00:	88 23       	and	r24, r24
    1d02:	2c f4       	brge	.+10     	; 0x1d0e <LCD_Data+0xbe>
		__ticks = 1;
    1d04:	81 e0       	ldi	r24, 0x01	; 1
    1d06:	90 e0       	ldi	r25, 0x00	; 0
    1d08:	9e 83       	std	Y+6, r25	; 0x06
    1d0a:	8d 83       	std	Y+5, r24	; 0x05
    1d0c:	3f c0       	rjmp	.+126    	; 0x1d8c <LCD_Data+0x13c>
	else if (__tmp > 65535)
    1d0e:	6f 81       	ldd	r22, Y+7	; 0x07
    1d10:	78 85       	ldd	r23, Y+8	; 0x08
    1d12:	89 85       	ldd	r24, Y+9	; 0x09
    1d14:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d16:	20 e0       	ldi	r18, 0x00	; 0
    1d18:	3f ef       	ldi	r19, 0xFF	; 255
    1d1a:	4f e7       	ldi	r20, 0x7F	; 127
    1d1c:	57 e4       	ldi	r21, 0x47	; 71
    1d1e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1d22:	18 16       	cp	r1, r24
    1d24:	4c f5       	brge	.+82     	; 0x1d78 <LCD_Data+0x128>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d26:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d28:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d2a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d2c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d2e:	20 e0       	ldi	r18, 0x00	; 0
    1d30:	30 e0       	ldi	r19, 0x00	; 0
    1d32:	40 e2       	ldi	r20, 0x20	; 32
    1d34:	51 e4       	ldi	r21, 0x41	; 65
    1d36:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d3a:	dc 01       	movw	r26, r24
    1d3c:	cb 01       	movw	r24, r22
    1d3e:	bc 01       	movw	r22, r24
    1d40:	cd 01       	movw	r24, r26
    1d42:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d46:	dc 01       	movw	r26, r24
    1d48:	cb 01       	movw	r24, r22
    1d4a:	9e 83       	std	Y+6, r25	; 0x06
    1d4c:	8d 83       	std	Y+5, r24	; 0x05
    1d4e:	0f c0       	rjmp	.+30     	; 0x1d6e <LCD_Data+0x11e>
    1d50:	89 e1       	ldi	r24, 0x19	; 25
    1d52:	90 e0       	ldi	r25, 0x00	; 0
    1d54:	9c 83       	std	Y+4, r25	; 0x04
    1d56:	8b 83       	std	Y+3, r24	; 0x03
    1d58:	8b 81       	ldd	r24, Y+3	; 0x03
    1d5a:	9c 81       	ldd	r25, Y+4	; 0x04
    1d5c:	01 97       	sbiw	r24, 0x01	; 1
    1d5e:	f1 f7       	brne	.-4      	; 0x1d5c <LCD_Data+0x10c>
    1d60:	9c 83       	std	Y+4, r25	; 0x04
    1d62:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d64:	8d 81       	ldd	r24, Y+5	; 0x05
    1d66:	9e 81       	ldd	r25, Y+6	; 0x06
    1d68:	01 97       	sbiw	r24, 0x01	; 1
    1d6a:	9e 83       	std	Y+6, r25	; 0x06
    1d6c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d6e:	8d 81       	ldd	r24, Y+5	; 0x05
    1d70:	9e 81       	ldd	r25, Y+6	; 0x06
    1d72:	00 97       	sbiw	r24, 0x00	; 0
    1d74:	69 f7       	brne	.-38     	; 0x1d50 <LCD_Data+0x100>
    1d76:	14 c0       	rjmp	.+40     	; 0x1da0 <LCD_Data+0x150>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d78:	6f 81       	ldd	r22, Y+7	; 0x07
    1d7a:	78 85       	ldd	r23, Y+8	; 0x08
    1d7c:	89 85       	ldd	r24, Y+9	; 0x09
    1d7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d80:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d84:	dc 01       	movw	r26, r24
    1d86:	cb 01       	movw	r24, r22
    1d88:	9e 83       	std	Y+6, r25	; 0x06
    1d8a:	8d 83       	std	Y+5, r24	; 0x05
    1d8c:	8d 81       	ldd	r24, Y+5	; 0x05
    1d8e:	9e 81       	ldd	r25, Y+6	; 0x06
    1d90:	9a 83       	std	Y+2, r25	; 0x02
    1d92:	89 83       	std	Y+1, r24	; 0x01
    1d94:	89 81       	ldd	r24, Y+1	; 0x01
    1d96:	9a 81       	ldd	r25, Y+2	; 0x02
    1d98:	01 97       	sbiw	r24, 0x01	; 1
    1d9a:	f1 f7       	brne	.-4      	; 0x1d98 <LCD_Data+0x148>
    1d9c:	9a 83       	std	Y+2, r25	; 0x02
    1d9e:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(20);
}
    1da0:	2f 96       	adiw	r28, 0x0f	; 15
    1da2:	0f b6       	in	r0, 0x3f	; 63
    1da4:	f8 94       	cli
    1da6:	de bf       	out	0x3e, r29	; 62
    1da8:	0f be       	out	0x3f, r0	; 63
    1daa:	cd bf       	out	0x3d, r28	; 61
    1dac:	cf 91       	pop	r28
    1dae:	df 91       	pop	r29
    1db0:	08 95       	ret

00001db2 <LCD_CLEAR>:

void LCD_CLEAR()
{
    1db2:	df 93       	push	r29
    1db4:	cf 93       	push	r28
    1db6:	cd b7       	in	r28, 0x3d	; 61
    1db8:	de b7       	in	r29, 0x3e	; 62
    1dba:	2e 97       	sbiw	r28, 0x0e	; 14
    1dbc:	0f b6       	in	r0, 0x3f	; 63
    1dbe:	f8 94       	cli
    1dc0:	de bf       	out	0x3e, r29	; 62
    1dc2:	0f be       	out	0x3f, r0	; 63
    1dc4:	cd bf       	out	0x3d, r28	; 61
 LCD_CMD(LCD_CLEAR_SCREEN);
    1dc6:	81 e0       	ldi	r24, 0x01	; 1
    1dc8:	0e 94 77 0d 	call	0x1aee	; 0x1aee <LCD_CMD>
    1dcc:	80 e0       	ldi	r24, 0x00	; 0
    1dce:	90 e0       	ldi	r25, 0x00	; 0
    1dd0:	a0 ea       	ldi	r26, 0xA0	; 160
    1dd2:	b1 e4       	ldi	r27, 0x41	; 65
    1dd4:	8b 87       	std	Y+11, r24	; 0x0b
    1dd6:	9c 87       	std	Y+12, r25	; 0x0c
    1dd8:	ad 87       	std	Y+13, r26	; 0x0d
    1dda:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ddc:	6b 85       	ldd	r22, Y+11	; 0x0b
    1dde:	7c 85       	ldd	r23, Y+12	; 0x0c
    1de0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1de2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1de4:	20 e0       	ldi	r18, 0x00	; 0
    1de6:	30 e0       	ldi	r19, 0x00	; 0
    1de8:	4a e7       	ldi	r20, 0x7A	; 122
    1dea:	53 e4       	ldi	r21, 0x43	; 67
    1dec:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1df0:	dc 01       	movw	r26, r24
    1df2:	cb 01       	movw	r24, r22
    1df4:	8f 83       	std	Y+7, r24	; 0x07
    1df6:	98 87       	std	Y+8, r25	; 0x08
    1df8:	a9 87       	std	Y+9, r26	; 0x09
    1dfa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1dfc:	6f 81       	ldd	r22, Y+7	; 0x07
    1dfe:	78 85       	ldd	r23, Y+8	; 0x08
    1e00:	89 85       	ldd	r24, Y+9	; 0x09
    1e02:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e04:	20 e0       	ldi	r18, 0x00	; 0
    1e06:	30 e0       	ldi	r19, 0x00	; 0
    1e08:	40 e8       	ldi	r20, 0x80	; 128
    1e0a:	5f e3       	ldi	r21, 0x3F	; 63
    1e0c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1e10:	88 23       	and	r24, r24
    1e12:	2c f4       	brge	.+10     	; 0x1e1e <LCD_CLEAR+0x6c>
		__ticks = 1;
    1e14:	81 e0       	ldi	r24, 0x01	; 1
    1e16:	90 e0       	ldi	r25, 0x00	; 0
    1e18:	9e 83       	std	Y+6, r25	; 0x06
    1e1a:	8d 83       	std	Y+5, r24	; 0x05
    1e1c:	3f c0       	rjmp	.+126    	; 0x1e9c <LCD_CLEAR+0xea>
	else if (__tmp > 65535)
    1e1e:	6f 81       	ldd	r22, Y+7	; 0x07
    1e20:	78 85       	ldd	r23, Y+8	; 0x08
    1e22:	89 85       	ldd	r24, Y+9	; 0x09
    1e24:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e26:	20 e0       	ldi	r18, 0x00	; 0
    1e28:	3f ef       	ldi	r19, 0xFF	; 255
    1e2a:	4f e7       	ldi	r20, 0x7F	; 127
    1e2c:	57 e4       	ldi	r21, 0x47	; 71
    1e2e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1e32:	18 16       	cp	r1, r24
    1e34:	4c f5       	brge	.+82     	; 0x1e88 <LCD_CLEAR+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e36:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e38:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e3a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e3c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e3e:	20 e0       	ldi	r18, 0x00	; 0
    1e40:	30 e0       	ldi	r19, 0x00	; 0
    1e42:	40 e2       	ldi	r20, 0x20	; 32
    1e44:	51 e4       	ldi	r21, 0x41	; 65
    1e46:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e4a:	dc 01       	movw	r26, r24
    1e4c:	cb 01       	movw	r24, r22
    1e4e:	bc 01       	movw	r22, r24
    1e50:	cd 01       	movw	r24, r26
    1e52:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e56:	dc 01       	movw	r26, r24
    1e58:	cb 01       	movw	r24, r22
    1e5a:	9e 83       	std	Y+6, r25	; 0x06
    1e5c:	8d 83       	std	Y+5, r24	; 0x05
    1e5e:	0f c0       	rjmp	.+30     	; 0x1e7e <LCD_CLEAR+0xcc>
    1e60:	89 e1       	ldi	r24, 0x19	; 25
    1e62:	90 e0       	ldi	r25, 0x00	; 0
    1e64:	9c 83       	std	Y+4, r25	; 0x04
    1e66:	8b 83       	std	Y+3, r24	; 0x03
    1e68:	8b 81       	ldd	r24, Y+3	; 0x03
    1e6a:	9c 81       	ldd	r25, Y+4	; 0x04
    1e6c:	01 97       	sbiw	r24, 0x01	; 1
    1e6e:	f1 f7       	brne	.-4      	; 0x1e6c <LCD_CLEAR+0xba>
    1e70:	9c 83       	std	Y+4, r25	; 0x04
    1e72:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e74:	8d 81       	ldd	r24, Y+5	; 0x05
    1e76:	9e 81       	ldd	r25, Y+6	; 0x06
    1e78:	01 97       	sbiw	r24, 0x01	; 1
    1e7a:	9e 83       	std	Y+6, r25	; 0x06
    1e7c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e7e:	8d 81       	ldd	r24, Y+5	; 0x05
    1e80:	9e 81       	ldd	r25, Y+6	; 0x06
    1e82:	00 97       	sbiw	r24, 0x00	; 0
    1e84:	69 f7       	brne	.-38     	; 0x1e60 <LCD_CLEAR+0xae>
    1e86:	14 c0       	rjmp	.+40     	; 0x1eb0 <LCD_CLEAR+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e88:	6f 81       	ldd	r22, Y+7	; 0x07
    1e8a:	78 85       	ldd	r23, Y+8	; 0x08
    1e8c:	89 85       	ldd	r24, Y+9	; 0x09
    1e8e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e90:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e94:	dc 01       	movw	r26, r24
    1e96:	cb 01       	movw	r24, r22
    1e98:	9e 83       	std	Y+6, r25	; 0x06
    1e9a:	8d 83       	std	Y+5, r24	; 0x05
    1e9c:	8d 81       	ldd	r24, Y+5	; 0x05
    1e9e:	9e 81       	ldd	r25, Y+6	; 0x06
    1ea0:	9a 83       	std	Y+2, r25	; 0x02
    1ea2:	89 83       	std	Y+1, r24	; 0x01
    1ea4:	89 81       	ldd	r24, Y+1	; 0x01
    1ea6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ea8:	01 97       	sbiw	r24, 0x01	; 1
    1eaa:	f1 f7       	brne	.-4      	; 0x1ea8 <LCD_CLEAR+0xf6>
    1eac:	9a 83       	std	Y+2, r25	; 0x02
    1eae:	89 83       	std	Y+1, r24	; 0x01
 _delay_ms(20);
}
    1eb0:	2e 96       	adiw	r28, 0x0e	; 14
    1eb2:	0f b6       	in	r0, 0x3f	; 63
    1eb4:	f8 94       	cli
    1eb6:	de bf       	out	0x3e, r29	; 62
    1eb8:	0f be       	out	0x3f, r0	; 63
    1eba:	cd bf       	out	0x3d, r28	; 61
    1ebc:	cf 91       	pop	r28
    1ebe:	df 91       	pop	r29
    1ec0:	08 95       	ret

00001ec2 <LCD_ENABLE>:

void LCD_ENABLE()
{
    1ec2:	df 93       	push	r29
    1ec4:	cf 93       	push	r28
    1ec6:	cd b7       	in	r28, 0x3d	; 61
    1ec8:	de b7       	in	r29, 0x3e	; 62
    1eca:	6c 97       	sbiw	r28, 0x1c	; 28
    1ecc:	0f b6       	in	r0, 0x3f	; 63
    1ece:	f8 94       	cli
    1ed0:	de bf       	out	0x3e, r29	; 62
    1ed2:	0f be       	out	0x3f, r0	; 63
    1ed4:	cd bf       	out	0x3d, r28	; 61
	DIO_setPinval(LCD_Ctr_Port, LCD_EN_PIN, HIGH);
    1ed6:	81 e0       	ldi	r24, 0x01	; 1
    1ed8:	63 e0       	ldi	r22, 0x03	; 3
    1eda:	41 e0       	ldi	r20, 0x01	; 1
    1edc:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <DIO_setPinval>
    1ee0:	80 e0       	ldi	r24, 0x00	; 0
    1ee2:	90 e0       	ldi	r25, 0x00	; 0
    1ee4:	a0 e0       	ldi	r26, 0x00	; 0
    1ee6:	b0 e4       	ldi	r27, 0x40	; 64
    1ee8:	89 8f       	std	Y+25, r24	; 0x19
    1eea:	9a 8f       	std	Y+26, r25	; 0x1a
    1eec:	ab 8f       	std	Y+27, r26	; 0x1b
    1eee:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ef0:	69 8d       	ldd	r22, Y+25	; 0x19
    1ef2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ef4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ef6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ef8:	20 e0       	ldi	r18, 0x00	; 0
    1efa:	30 e0       	ldi	r19, 0x00	; 0
    1efc:	4a e7       	ldi	r20, 0x7A	; 122
    1efe:	53 e4       	ldi	r21, 0x43	; 67
    1f00:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f04:	dc 01       	movw	r26, r24
    1f06:	cb 01       	movw	r24, r22
    1f08:	8d 8b       	std	Y+21, r24	; 0x15
    1f0a:	9e 8b       	std	Y+22, r25	; 0x16
    1f0c:	af 8b       	std	Y+23, r26	; 0x17
    1f0e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1f10:	6d 89       	ldd	r22, Y+21	; 0x15
    1f12:	7e 89       	ldd	r23, Y+22	; 0x16
    1f14:	8f 89       	ldd	r24, Y+23	; 0x17
    1f16:	98 8d       	ldd	r25, Y+24	; 0x18
    1f18:	20 e0       	ldi	r18, 0x00	; 0
    1f1a:	30 e0       	ldi	r19, 0x00	; 0
    1f1c:	40 e8       	ldi	r20, 0x80	; 128
    1f1e:	5f e3       	ldi	r21, 0x3F	; 63
    1f20:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1f24:	88 23       	and	r24, r24
    1f26:	2c f4       	brge	.+10     	; 0x1f32 <LCD_ENABLE+0x70>
		__ticks = 1;
    1f28:	81 e0       	ldi	r24, 0x01	; 1
    1f2a:	90 e0       	ldi	r25, 0x00	; 0
    1f2c:	9c 8b       	std	Y+20, r25	; 0x14
    1f2e:	8b 8b       	std	Y+19, r24	; 0x13
    1f30:	3f c0       	rjmp	.+126    	; 0x1fb0 <LCD_ENABLE+0xee>
	else if (__tmp > 65535)
    1f32:	6d 89       	ldd	r22, Y+21	; 0x15
    1f34:	7e 89       	ldd	r23, Y+22	; 0x16
    1f36:	8f 89       	ldd	r24, Y+23	; 0x17
    1f38:	98 8d       	ldd	r25, Y+24	; 0x18
    1f3a:	20 e0       	ldi	r18, 0x00	; 0
    1f3c:	3f ef       	ldi	r19, 0xFF	; 255
    1f3e:	4f e7       	ldi	r20, 0x7F	; 127
    1f40:	57 e4       	ldi	r21, 0x47	; 71
    1f42:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1f46:	18 16       	cp	r1, r24
    1f48:	4c f5       	brge	.+82     	; 0x1f9c <LCD_ENABLE+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f4a:	69 8d       	ldd	r22, Y+25	; 0x19
    1f4c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f4e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f50:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f52:	20 e0       	ldi	r18, 0x00	; 0
    1f54:	30 e0       	ldi	r19, 0x00	; 0
    1f56:	40 e2       	ldi	r20, 0x20	; 32
    1f58:	51 e4       	ldi	r21, 0x41	; 65
    1f5a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f5e:	dc 01       	movw	r26, r24
    1f60:	cb 01       	movw	r24, r22
    1f62:	bc 01       	movw	r22, r24
    1f64:	cd 01       	movw	r24, r26
    1f66:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f6a:	dc 01       	movw	r26, r24
    1f6c:	cb 01       	movw	r24, r22
    1f6e:	9c 8b       	std	Y+20, r25	; 0x14
    1f70:	8b 8b       	std	Y+19, r24	; 0x13
    1f72:	0f c0       	rjmp	.+30     	; 0x1f92 <LCD_ENABLE+0xd0>
    1f74:	89 e1       	ldi	r24, 0x19	; 25
    1f76:	90 e0       	ldi	r25, 0x00	; 0
    1f78:	9a 8b       	std	Y+18, r25	; 0x12
    1f7a:	89 8b       	std	Y+17, r24	; 0x11
    1f7c:	89 89       	ldd	r24, Y+17	; 0x11
    1f7e:	9a 89       	ldd	r25, Y+18	; 0x12
    1f80:	01 97       	sbiw	r24, 0x01	; 1
    1f82:	f1 f7       	brne	.-4      	; 0x1f80 <LCD_ENABLE+0xbe>
    1f84:	9a 8b       	std	Y+18, r25	; 0x12
    1f86:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f88:	8b 89       	ldd	r24, Y+19	; 0x13
    1f8a:	9c 89       	ldd	r25, Y+20	; 0x14
    1f8c:	01 97       	sbiw	r24, 0x01	; 1
    1f8e:	9c 8b       	std	Y+20, r25	; 0x14
    1f90:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f92:	8b 89       	ldd	r24, Y+19	; 0x13
    1f94:	9c 89       	ldd	r25, Y+20	; 0x14
    1f96:	00 97       	sbiw	r24, 0x00	; 0
    1f98:	69 f7       	brne	.-38     	; 0x1f74 <LCD_ENABLE+0xb2>
    1f9a:	14 c0       	rjmp	.+40     	; 0x1fc4 <LCD_ENABLE+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f9c:	6d 89       	ldd	r22, Y+21	; 0x15
    1f9e:	7e 89       	ldd	r23, Y+22	; 0x16
    1fa0:	8f 89       	ldd	r24, Y+23	; 0x17
    1fa2:	98 8d       	ldd	r25, Y+24	; 0x18
    1fa4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1fa8:	dc 01       	movw	r26, r24
    1faa:	cb 01       	movw	r24, r22
    1fac:	9c 8b       	std	Y+20, r25	; 0x14
    1fae:	8b 8b       	std	Y+19, r24	; 0x13
    1fb0:	8b 89       	ldd	r24, Y+19	; 0x13
    1fb2:	9c 89       	ldd	r25, Y+20	; 0x14
    1fb4:	98 8b       	std	Y+16, r25	; 0x10
    1fb6:	8f 87       	std	Y+15, r24	; 0x0f
    1fb8:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fba:	98 89       	ldd	r25, Y+16	; 0x10
    1fbc:	01 97       	sbiw	r24, 0x01	; 1
    1fbe:	f1 f7       	brne	.-4      	; 0x1fbc <LCD_ENABLE+0xfa>
    1fc0:	98 8b       	std	Y+16, r25	; 0x10
    1fc2:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	DIO_setPinval(LCD_Ctr_Port, LCD_EN_PIN, LOW);
    1fc4:	81 e0       	ldi	r24, 0x01	; 1
    1fc6:	63 e0       	ldi	r22, 0x03	; 3
    1fc8:	40 e0       	ldi	r20, 0x00	; 0
    1fca:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <DIO_setPinval>
    1fce:	80 e0       	ldi	r24, 0x00	; 0
    1fd0:	90 e0       	ldi	r25, 0x00	; 0
    1fd2:	a0 e0       	ldi	r26, 0x00	; 0
    1fd4:	b0 e4       	ldi	r27, 0x40	; 64
    1fd6:	8b 87       	std	Y+11, r24	; 0x0b
    1fd8:	9c 87       	std	Y+12, r25	; 0x0c
    1fda:	ad 87       	std	Y+13, r26	; 0x0d
    1fdc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fde:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fe0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fe2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fe4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fe6:	20 e0       	ldi	r18, 0x00	; 0
    1fe8:	30 e0       	ldi	r19, 0x00	; 0
    1fea:	4a e7       	ldi	r20, 0x7A	; 122
    1fec:	53 e4       	ldi	r21, 0x43	; 67
    1fee:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ff2:	dc 01       	movw	r26, r24
    1ff4:	cb 01       	movw	r24, r22
    1ff6:	8f 83       	std	Y+7, r24	; 0x07
    1ff8:	98 87       	std	Y+8, r25	; 0x08
    1ffa:	a9 87       	std	Y+9, r26	; 0x09
    1ffc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ffe:	6f 81       	ldd	r22, Y+7	; 0x07
    2000:	78 85       	ldd	r23, Y+8	; 0x08
    2002:	89 85       	ldd	r24, Y+9	; 0x09
    2004:	9a 85       	ldd	r25, Y+10	; 0x0a
    2006:	20 e0       	ldi	r18, 0x00	; 0
    2008:	30 e0       	ldi	r19, 0x00	; 0
    200a:	40 e8       	ldi	r20, 0x80	; 128
    200c:	5f e3       	ldi	r21, 0x3F	; 63
    200e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2012:	88 23       	and	r24, r24
    2014:	2c f4       	brge	.+10     	; 0x2020 <LCD_ENABLE+0x15e>
		__ticks = 1;
    2016:	81 e0       	ldi	r24, 0x01	; 1
    2018:	90 e0       	ldi	r25, 0x00	; 0
    201a:	9e 83       	std	Y+6, r25	; 0x06
    201c:	8d 83       	std	Y+5, r24	; 0x05
    201e:	3f c0       	rjmp	.+126    	; 0x209e <LCD_ENABLE+0x1dc>
	else if (__tmp > 65535)
    2020:	6f 81       	ldd	r22, Y+7	; 0x07
    2022:	78 85       	ldd	r23, Y+8	; 0x08
    2024:	89 85       	ldd	r24, Y+9	; 0x09
    2026:	9a 85       	ldd	r25, Y+10	; 0x0a
    2028:	20 e0       	ldi	r18, 0x00	; 0
    202a:	3f ef       	ldi	r19, 0xFF	; 255
    202c:	4f e7       	ldi	r20, 0x7F	; 127
    202e:	57 e4       	ldi	r21, 0x47	; 71
    2030:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2034:	18 16       	cp	r1, r24
    2036:	4c f5       	brge	.+82     	; 0x208a <LCD_ENABLE+0x1c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2038:	6b 85       	ldd	r22, Y+11	; 0x0b
    203a:	7c 85       	ldd	r23, Y+12	; 0x0c
    203c:	8d 85       	ldd	r24, Y+13	; 0x0d
    203e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2040:	20 e0       	ldi	r18, 0x00	; 0
    2042:	30 e0       	ldi	r19, 0x00	; 0
    2044:	40 e2       	ldi	r20, 0x20	; 32
    2046:	51 e4       	ldi	r21, 0x41	; 65
    2048:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    204c:	dc 01       	movw	r26, r24
    204e:	cb 01       	movw	r24, r22
    2050:	bc 01       	movw	r22, r24
    2052:	cd 01       	movw	r24, r26
    2054:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2058:	dc 01       	movw	r26, r24
    205a:	cb 01       	movw	r24, r22
    205c:	9e 83       	std	Y+6, r25	; 0x06
    205e:	8d 83       	std	Y+5, r24	; 0x05
    2060:	0f c0       	rjmp	.+30     	; 0x2080 <LCD_ENABLE+0x1be>
    2062:	89 e1       	ldi	r24, 0x19	; 25
    2064:	90 e0       	ldi	r25, 0x00	; 0
    2066:	9c 83       	std	Y+4, r25	; 0x04
    2068:	8b 83       	std	Y+3, r24	; 0x03
    206a:	8b 81       	ldd	r24, Y+3	; 0x03
    206c:	9c 81       	ldd	r25, Y+4	; 0x04
    206e:	01 97       	sbiw	r24, 0x01	; 1
    2070:	f1 f7       	brne	.-4      	; 0x206e <LCD_ENABLE+0x1ac>
    2072:	9c 83       	std	Y+4, r25	; 0x04
    2074:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2076:	8d 81       	ldd	r24, Y+5	; 0x05
    2078:	9e 81       	ldd	r25, Y+6	; 0x06
    207a:	01 97       	sbiw	r24, 0x01	; 1
    207c:	9e 83       	std	Y+6, r25	; 0x06
    207e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2080:	8d 81       	ldd	r24, Y+5	; 0x05
    2082:	9e 81       	ldd	r25, Y+6	; 0x06
    2084:	00 97       	sbiw	r24, 0x00	; 0
    2086:	69 f7       	brne	.-38     	; 0x2062 <LCD_ENABLE+0x1a0>
    2088:	14 c0       	rjmp	.+40     	; 0x20b2 <LCD_ENABLE+0x1f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    208a:	6f 81       	ldd	r22, Y+7	; 0x07
    208c:	78 85       	ldd	r23, Y+8	; 0x08
    208e:	89 85       	ldd	r24, Y+9	; 0x09
    2090:	9a 85       	ldd	r25, Y+10	; 0x0a
    2092:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2096:	dc 01       	movw	r26, r24
    2098:	cb 01       	movw	r24, r22
    209a:	9e 83       	std	Y+6, r25	; 0x06
    209c:	8d 83       	std	Y+5, r24	; 0x05
    209e:	8d 81       	ldd	r24, Y+5	; 0x05
    20a0:	9e 81       	ldd	r25, Y+6	; 0x06
    20a2:	9a 83       	std	Y+2, r25	; 0x02
    20a4:	89 83       	std	Y+1, r24	; 0x01
    20a6:	89 81       	ldd	r24, Y+1	; 0x01
    20a8:	9a 81       	ldd	r25, Y+2	; 0x02
    20aa:	01 97       	sbiw	r24, 0x01	; 1
    20ac:	f1 f7       	brne	.-4      	; 0x20aa <LCD_ENABLE+0x1e8>
    20ae:	9a 83       	std	Y+2, r25	; 0x02
    20b0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    20b2:	6c 96       	adiw	r28, 0x1c	; 28
    20b4:	0f b6       	in	r0, 0x3f	; 63
    20b6:	f8 94       	cli
    20b8:	de bf       	out	0x3e, r29	; 62
    20ba:	0f be       	out	0x3f, r0	; 63
    20bc:	cd bf       	out	0x3d, r28	; 61
    20be:	cf 91       	pop	r28
    20c0:	df 91       	pop	r29
    20c2:	08 95       	ret

000020c4 <LCD_Sentence>:

void LCD_Sentence(u8 *SEN,u8 ROW, u8 Col)
{
    20c4:	df 93       	push	r29
    20c6:	cf 93       	push	r28
    20c8:	00 d0       	rcall	.+0      	; 0x20ca <LCD_Sentence+0x6>
    20ca:	00 d0       	rcall	.+0      	; 0x20cc <LCD_Sentence+0x8>
    20cc:	00 d0       	rcall	.+0      	; 0x20ce <LCD_Sentence+0xa>
    20ce:	cd b7       	in	r28, 0x3d	; 61
    20d0:	de b7       	in	r29, 0x3e	; 62
    20d2:	9c 83       	std	Y+4, r25	; 0x04
    20d4:	8b 83       	std	Y+3, r24	; 0x03
    20d6:	6d 83       	std	Y+5, r22	; 0x05
    20d8:	4e 83       	std	Y+6, r20	; 0x06
	LCD_Goto(ROW,Col);
    20da:	8d 81       	ldd	r24, Y+5	; 0x05
    20dc:	6e 81       	ldd	r22, Y+6	; 0x06
    20de:	0e 94 85 11 	call	0x230a	; 0x230a <LCD_Goto>
	u8 index=0;
    20e2:	1a 82       	std	Y+2, r1	; 0x02
	u8 line=0;
    20e4:	19 82       	std	Y+1, r1	; 0x01
    20e6:	70 c0       	rjmp	.+224    	; 0x21c8 <LCD_Sentence+0x104>
	while(SEN[index] != '\0' && (ROW*16)+(index+Col)<32)
	{
		if((ROW*16)+(index+Col)<16)
    20e8:	8d 81       	ldd	r24, Y+5	; 0x05
    20ea:	88 2f       	mov	r24, r24
    20ec:	90 e0       	ldi	r25, 0x00	; 0
    20ee:	ac 01       	movw	r20, r24
    20f0:	42 95       	swap	r20
    20f2:	52 95       	swap	r21
    20f4:	50 7f       	andi	r21, 0xF0	; 240
    20f6:	54 27       	eor	r21, r20
    20f8:	40 7f       	andi	r20, 0xF0	; 240
    20fa:	54 27       	eor	r21, r20
    20fc:	8a 81       	ldd	r24, Y+2	; 0x02
    20fe:	28 2f       	mov	r18, r24
    2100:	30 e0       	ldi	r19, 0x00	; 0
    2102:	8e 81       	ldd	r24, Y+6	; 0x06
    2104:	88 2f       	mov	r24, r24
    2106:	90 e0       	ldi	r25, 0x00	; 0
    2108:	82 0f       	add	r24, r18
    210a:	93 1f       	adc	r25, r19
    210c:	84 0f       	add	r24, r20
    210e:	95 1f       	adc	r25, r21
    2110:	80 31       	cpi	r24, 0x10	; 16
    2112:	91 05       	cpc	r25, r1
    2114:	7c f4       	brge	.+30     	; 0x2134 <LCD_Sentence+0x70>
		{
			LCD_Data(SEN[index]);
    2116:	8a 81       	ldd	r24, Y+2	; 0x02
    2118:	28 2f       	mov	r18, r24
    211a:	30 e0       	ldi	r19, 0x00	; 0
    211c:	8b 81       	ldd	r24, Y+3	; 0x03
    211e:	9c 81       	ldd	r25, Y+4	; 0x04
    2120:	fc 01       	movw	r30, r24
    2122:	e2 0f       	add	r30, r18
    2124:	f3 1f       	adc	r31, r19
    2126:	80 81       	ld	r24, Z
    2128:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <LCD_Data>
			index++;
    212c:	8a 81       	ldd	r24, Y+2	; 0x02
    212e:	8f 5f       	subi	r24, 0xFF	; 255
    2130:	8a 83       	std	Y+2, r24	; 0x02
    2132:	4a c0       	rjmp	.+148    	; 0x21c8 <LCD_Sentence+0x104>
		}
		else if(((ROW * 16)+(index + Col))==16 && line==0)
    2134:	8d 81       	ldd	r24, Y+5	; 0x05
    2136:	88 2f       	mov	r24, r24
    2138:	90 e0       	ldi	r25, 0x00	; 0
    213a:	ac 01       	movw	r20, r24
    213c:	42 95       	swap	r20
    213e:	52 95       	swap	r21
    2140:	50 7f       	andi	r21, 0xF0	; 240
    2142:	54 27       	eor	r21, r20
    2144:	40 7f       	andi	r20, 0xF0	; 240
    2146:	54 27       	eor	r21, r20
    2148:	8a 81       	ldd	r24, Y+2	; 0x02
    214a:	28 2f       	mov	r18, r24
    214c:	30 e0       	ldi	r19, 0x00	; 0
    214e:	8e 81       	ldd	r24, Y+6	; 0x06
    2150:	88 2f       	mov	r24, r24
    2152:	90 e0       	ldi	r25, 0x00	; 0
    2154:	82 0f       	add	r24, r18
    2156:	93 1f       	adc	r25, r19
    2158:	84 0f       	add	r24, r20
    215a:	95 1f       	adc	r25, r21
    215c:	80 31       	cpi	r24, 0x10	; 16
    215e:	91 05       	cpc	r25, r1
    2160:	59 f4       	brne	.+22     	; 0x2178 <LCD_Sentence+0xb4>
    2162:	89 81       	ldd	r24, Y+1	; 0x01
    2164:	88 23       	and	r24, r24
    2166:	41 f4       	brne	.+16     	; 0x2178 <LCD_Sentence+0xb4>
		{
			LCD_Goto(1, 0);
    2168:	81 e0       	ldi	r24, 0x01	; 1
    216a:	60 e0       	ldi	r22, 0x00	; 0
    216c:	0e 94 85 11 	call	0x230a	; 0x230a <LCD_Goto>
			line++;
    2170:	89 81       	ldd	r24, Y+1	; 0x01
    2172:	8f 5f       	subi	r24, 0xFF	; 255
    2174:	89 83       	std	Y+1, r24	; 0x01
    2176:	28 c0       	rjmp	.+80     	; 0x21c8 <LCD_Sentence+0x104>
		}
		else if(((ROW*16)+(index+Col))<32 && line==1)
    2178:	8d 81       	ldd	r24, Y+5	; 0x05
    217a:	88 2f       	mov	r24, r24
    217c:	90 e0       	ldi	r25, 0x00	; 0
    217e:	ac 01       	movw	r20, r24
    2180:	42 95       	swap	r20
    2182:	52 95       	swap	r21
    2184:	50 7f       	andi	r21, 0xF0	; 240
    2186:	54 27       	eor	r21, r20
    2188:	40 7f       	andi	r20, 0xF0	; 240
    218a:	54 27       	eor	r21, r20
    218c:	8a 81       	ldd	r24, Y+2	; 0x02
    218e:	28 2f       	mov	r18, r24
    2190:	30 e0       	ldi	r19, 0x00	; 0
    2192:	8e 81       	ldd	r24, Y+6	; 0x06
    2194:	88 2f       	mov	r24, r24
    2196:	90 e0       	ldi	r25, 0x00	; 0
    2198:	82 0f       	add	r24, r18
    219a:	93 1f       	adc	r25, r19
    219c:	84 0f       	add	r24, r20
    219e:	95 1f       	adc	r25, r21
    21a0:	80 32       	cpi	r24, 0x20	; 32
    21a2:	91 05       	cpc	r25, r1
    21a4:	8c f4       	brge	.+34     	; 0x21c8 <LCD_Sentence+0x104>
    21a6:	89 81       	ldd	r24, Y+1	; 0x01
    21a8:	81 30       	cpi	r24, 0x01	; 1
    21aa:	71 f4       	brne	.+28     	; 0x21c8 <LCD_Sentence+0x104>
		{
			LCD_Data(SEN[index]);
    21ac:	8a 81       	ldd	r24, Y+2	; 0x02
    21ae:	28 2f       	mov	r18, r24
    21b0:	30 e0       	ldi	r19, 0x00	; 0
    21b2:	8b 81       	ldd	r24, Y+3	; 0x03
    21b4:	9c 81       	ldd	r25, Y+4	; 0x04
    21b6:	fc 01       	movw	r30, r24
    21b8:	e2 0f       	add	r30, r18
    21ba:	f3 1f       	adc	r31, r19
    21bc:	80 81       	ld	r24, Z
    21be:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <LCD_Data>
			index++;
    21c2:	8a 81       	ldd	r24, Y+2	; 0x02
    21c4:	8f 5f       	subi	r24, 0xFF	; 255
    21c6:	8a 83       	std	Y+2, r24	; 0x02
void LCD_Sentence(u8 *SEN,u8 ROW, u8 Col)
{
	LCD_Goto(ROW,Col);
	u8 index=0;
	u8 line=0;
	while(SEN[index] != '\0' && (ROW*16)+(index+Col)<32)
    21c8:	8a 81       	ldd	r24, Y+2	; 0x02
    21ca:	28 2f       	mov	r18, r24
    21cc:	30 e0       	ldi	r19, 0x00	; 0
    21ce:	8b 81       	ldd	r24, Y+3	; 0x03
    21d0:	9c 81       	ldd	r25, Y+4	; 0x04
    21d2:	fc 01       	movw	r30, r24
    21d4:	e2 0f       	add	r30, r18
    21d6:	f3 1f       	adc	r31, r19
    21d8:	80 81       	ld	r24, Z
    21da:	88 23       	and	r24, r24
    21dc:	c1 f0       	breq	.+48     	; 0x220e <LCD_Sentence+0x14a>
    21de:	8d 81       	ldd	r24, Y+5	; 0x05
    21e0:	88 2f       	mov	r24, r24
    21e2:	90 e0       	ldi	r25, 0x00	; 0
    21e4:	ac 01       	movw	r20, r24
    21e6:	42 95       	swap	r20
    21e8:	52 95       	swap	r21
    21ea:	50 7f       	andi	r21, 0xF0	; 240
    21ec:	54 27       	eor	r21, r20
    21ee:	40 7f       	andi	r20, 0xF0	; 240
    21f0:	54 27       	eor	r21, r20
    21f2:	8a 81       	ldd	r24, Y+2	; 0x02
    21f4:	28 2f       	mov	r18, r24
    21f6:	30 e0       	ldi	r19, 0x00	; 0
    21f8:	8e 81       	ldd	r24, Y+6	; 0x06
    21fa:	88 2f       	mov	r24, r24
    21fc:	90 e0       	ldi	r25, 0x00	; 0
    21fe:	82 0f       	add	r24, r18
    2200:	93 1f       	adc	r25, r19
    2202:	84 0f       	add	r24, r20
    2204:	95 1f       	adc	r25, r21
    2206:	80 32       	cpi	r24, 0x20	; 32
    2208:	91 05       	cpc	r25, r1
    220a:	0c f4       	brge	.+2      	; 0x220e <LCD_Sentence+0x14a>
    220c:	6d cf       	rjmp	.-294    	; 0x20e8 <LCD_Sentence+0x24>
			LCD_Data(SEN[index]);
			index++;
		}

	}
}
    220e:	26 96       	adiw	r28, 0x06	; 6
    2210:	0f b6       	in	r0, 0x3f	; 63
    2212:	f8 94       	cli
    2214:	de bf       	out	0x3e, r29	; 62
    2216:	0f be       	out	0x3f, r0	; 63
    2218:	cd bf       	out	0x3d, r28	; 61
    221a:	cf 91       	pop	r28
    221c:	df 91       	pop	r29
    221e:	08 95       	ret

00002220 <LCD_Digit>:

void LCD_Digit(u32 num)
{
    2220:	0f 93       	push	r16
    2222:	1f 93       	push	r17
    2224:	df 93       	push	r29
    2226:	cf 93       	push	r28
    2228:	cd b7       	in	r28, 0x3d	; 61
    222a:	de b7       	in	r29, 0x3e	; 62
    222c:	60 97       	sbiw	r28, 0x10	; 16
    222e:	0f b6       	in	r0, 0x3f	; 63
    2230:	f8 94       	cli
    2232:	de bf       	out	0x3e, r29	; 62
    2234:	0f be       	out	0x3f, r0	; 63
    2236:	cd bf       	out	0x3d, r28	; 61
    2238:	6d 87       	std	Y+13, r22	; 0x0d
    223a:	7e 87       	std	Y+14, r23	; 0x0e
    223c:	8f 87       	std	Y+15, r24	; 0x0f
    223e:	98 8b       	std	Y+16, r25	; 0x10
	u8 i=0,arr[10],j;
    2240:	1a 82       	std	Y+2, r1	; 0x02
	if(num==0)
    2242:	8d 85       	ldd	r24, Y+13	; 0x0d
    2244:	9e 85       	ldd	r25, Y+14	; 0x0e
    2246:	af 85       	ldd	r26, Y+15	; 0x0f
    2248:	b8 89       	ldd	r27, Y+16	; 0x10
    224a:	00 97       	sbiw	r24, 0x00	; 0
    224c:	a1 05       	cpc	r26, r1
    224e:	b1 05       	cpc	r27, r1
    2250:	91 f5       	brne	.+100    	; 0x22b6 <LCD_Digit+0x96>
	{
		LCD_Data('0');
    2252:	80 e3       	ldi	r24, 0x30	; 48
    2254:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <LCD_Data>
    2258:	4d c0       	rjmp	.+154    	; 0x22f4 <LCD_Digit+0xd4>
	}
	else
	{
		while(num)
		{
			arr[i]=num%10+'0';
    225a:	8a 81       	ldd	r24, Y+2	; 0x02
    225c:	08 2f       	mov	r16, r24
    225e:	10 e0       	ldi	r17, 0x00	; 0
    2260:	8d 85       	ldd	r24, Y+13	; 0x0d
    2262:	9e 85       	ldd	r25, Y+14	; 0x0e
    2264:	af 85       	ldd	r26, Y+15	; 0x0f
    2266:	b8 89       	ldd	r27, Y+16	; 0x10
    2268:	2a e0       	ldi	r18, 0x0A	; 10
    226a:	30 e0       	ldi	r19, 0x00	; 0
    226c:	40 e0       	ldi	r20, 0x00	; 0
    226e:	50 e0       	ldi	r21, 0x00	; 0
    2270:	bc 01       	movw	r22, r24
    2272:	cd 01       	movw	r24, r26
    2274:	0e 94 4b 13 	call	0x2696	; 0x2696 <__udivmodsi4>
    2278:	dc 01       	movw	r26, r24
    227a:	cb 01       	movw	r24, r22
    227c:	28 2f       	mov	r18, r24
    227e:	20 5d       	subi	r18, 0xD0	; 208
    2280:	ce 01       	movw	r24, r28
    2282:	03 96       	adiw	r24, 0x03	; 3
    2284:	fc 01       	movw	r30, r24
    2286:	e0 0f       	add	r30, r16
    2288:	f1 1f       	adc	r31, r17
    228a:	20 83       	st	Z, r18
			num/=10;
    228c:	8d 85       	ldd	r24, Y+13	; 0x0d
    228e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2290:	af 85       	ldd	r26, Y+15	; 0x0f
    2292:	b8 89       	ldd	r27, Y+16	; 0x10
    2294:	2a e0       	ldi	r18, 0x0A	; 10
    2296:	30 e0       	ldi	r19, 0x00	; 0
    2298:	40 e0       	ldi	r20, 0x00	; 0
    229a:	50 e0       	ldi	r21, 0x00	; 0
    229c:	bc 01       	movw	r22, r24
    229e:	cd 01       	movw	r24, r26
    22a0:	0e 94 4b 13 	call	0x2696	; 0x2696 <__udivmodsi4>
    22a4:	da 01       	movw	r26, r20
    22a6:	c9 01       	movw	r24, r18
    22a8:	8d 87       	std	Y+13, r24	; 0x0d
    22aa:	9e 87       	std	Y+14, r25	; 0x0e
    22ac:	af 87       	std	Y+15, r26	; 0x0f
    22ae:	b8 8b       	std	Y+16, r27	; 0x10
			i++;
    22b0:	8a 81       	ldd	r24, Y+2	; 0x02
    22b2:	8f 5f       	subi	r24, 0xFF	; 255
    22b4:	8a 83       	std	Y+2, r24	; 0x02
	{
		LCD_Data('0');
	}
	else
	{
		while(num)
    22b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    22b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    22ba:	af 85       	ldd	r26, Y+15	; 0x0f
    22bc:	b8 89       	ldd	r27, Y+16	; 0x10
    22be:	00 97       	sbiw	r24, 0x00	; 0
    22c0:	a1 05       	cpc	r26, r1
    22c2:	b1 05       	cpc	r27, r1
    22c4:	51 f6       	brne	.-108    	; 0x225a <LCD_Digit+0x3a>
		{
			arr[i]=num%10+'0';
			num/=10;
			i++;
		}
		for( j=i;j>0;j--)
    22c6:	8a 81       	ldd	r24, Y+2	; 0x02
    22c8:	89 83       	std	Y+1, r24	; 0x01
    22ca:	11 c0       	rjmp	.+34     	; 0x22ee <LCD_Digit+0xce>
		{
			LCD_Data(arr[j-1]);
    22cc:	89 81       	ldd	r24, Y+1	; 0x01
    22ce:	88 2f       	mov	r24, r24
    22d0:	90 e0       	ldi	r25, 0x00	; 0
    22d2:	9c 01       	movw	r18, r24
    22d4:	21 50       	subi	r18, 0x01	; 1
    22d6:	30 40       	sbci	r19, 0x00	; 0
    22d8:	ce 01       	movw	r24, r28
    22da:	03 96       	adiw	r24, 0x03	; 3
    22dc:	fc 01       	movw	r30, r24
    22de:	e2 0f       	add	r30, r18
    22e0:	f3 1f       	adc	r31, r19
    22e2:	80 81       	ld	r24, Z
    22e4:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <LCD_Data>
		{
			arr[i]=num%10+'0';
			num/=10;
			i++;
		}
		for( j=i;j>0;j--)
    22e8:	89 81       	ldd	r24, Y+1	; 0x01
    22ea:	81 50       	subi	r24, 0x01	; 1
    22ec:	89 83       	std	Y+1, r24	; 0x01
    22ee:	89 81       	ldd	r24, Y+1	; 0x01
    22f0:	88 23       	and	r24, r24
    22f2:	61 f7       	brne	.-40     	; 0x22cc <LCD_Digit+0xac>
			LCD_Data(arr[j-1]);
		}
	}


}
    22f4:	60 96       	adiw	r28, 0x10	; 16
    22f6:	0f b6       	in	r0, 0x3f	; 63
    22f8:	f8 94       	cli
    22fa:	de bf       	out	0x3e, r29	; 62
    22fc:	0f be       	out	0x3f, r0	; 63
    22fe:	cd bf       	out	0x3d, r28	; 61
    2300:	cf 91       	pop	r28
    2302:	df 91       	pop	r29
    2304:	1f 91       	pop	r17
    2306:	0f 91       	pop	r16
    2308:	08 95       	ret

0000230a <LCD_Goto>:

void LCD_Goto(u8 ROW, u8 Col)
{
    230a:	df 93       	push	r29
    230c:	cf 93       	push	r28
    230e:	00 d0       	rcall	.+0      	; 0x2310 <LCD_Goto+0x6>
    2310:	0f 92       	push	r0
    2312:	cd b7       	in	r28, 0x3d	; 61
    2314:	de b7       	in	r29, 0x3e	; 62
    2316:	8a 83       	std	Y+2, r24	; 0x02
    2318:	6b 83       	std	Y+3, r22	; 0x03
	u8 address;
	if (ROW <2 && Col <16)
    231a:	8a 81       	ldd	r24, Y+2	; 0x02
    231c:	82 30       	cpi	r24, 0x02	; 2
    231e:	c8 f4       	brcc	.+50     	; 0x2352 <LCD_Goto+0x48>
    2320:	8b 81       	ldd	r24, Y+3	; 0x03
    2322:	80 31       	cpi	r24, 0x10	; 16
    2324:	b0 f4       	brcc	.+44     	; 0x2352 <LCD_Goto+0x48>
	{
		address=(ROW * 0x40)+Col;
    2326:	8a 81       	ldd	r24, Y+2	; 0x02
    2328:	88 2f       	mov	r24, r24
    232a:	90 e0       	ldi	r25, 0x00	; 0
    232c:	00 24       	eor	r0, r0
    232e:	96 95       	lsr	r25
    2330:	87 95       	ror	r24
    2332:	07 94       	ror	r0
    2334:	96 95       	lsr	r25
    2336:	87 95       	ror	r24
    2338:	07 94       	ror	r0
    233a:	98 2f       	mov	r25, r24
    233c:	80 2d       	mov	r24, r0
    233e:	98 2f       	mov	r25, r24
    2340:	8b 81       	ldd	r24, Y+3	; 0x03
    2342:	89 0f       	add	r24, r25
    2344:	89 83       	std	Y+1, r24	; 0x01
		address= SET_BIT(address,7);
    2346:	89 81       	ldd	r24, Y+1	; 0x01
    2348:	80 68       	ori	r24, 0x80	; 128
    234a:	89 83       	std	Y+1, r24	; 0x01
		LCD_CMD(address);
    234c:	89 81       	ldd	r24, Y+1	; 0x01
    234e:	0e 94 77 0d 	call	0x1aee	; 0x1aee <LCD_CMD>
	}
}
    2352:	0f 90       	pop	r0
    2354:	0f 90       	pop	r0
    2356:	0f 90       	pop	r0
    2358:	cf 91       	pop	r28
    235a:	df 91       	pop	r29
    235c:	08 95       	ret

0000235e <LCD_Pattern>:

void LCD_Pattern(u8 *pattern,u8 CGRAM_index)
{
    235e:	df 93       	push	r29
    2360:	cf 93       	push	r28
    2362:	00 d0       	rcall	.+0      	; 0x2364 <LCD_Pattern+0x6>
    2364:	00 d0       	rcall	.+0      	; 0x2366 <LCD_Pattern+0x8>
    2366:	00 d0       	rcall	.+0      	; 0x2368 <LCD_Pattern+0xa>
    2368:	cd b7       	in	r28, 0x3d	; 61
    236a:	de b7       	in	r29, 0x3e	; 62
    236c:	9d 83       	std	Y+5, r25	; 0x05
    236e:	8c 83       	std	Y+4, r24	; 0x04
    2370:	6e 83       	std	Y+6, r22	; 0x06
	u8 address;
	if(CGRAM_index < 8)
    2372:	8e 81       	ldd	r24, Y+6	; 0x06
    2374:	88 30       	cpi	r24, 0x08	; 8
    2376:	50 f5       	brcc	.+84     	; 0x23cc <LCD_Pattern+0x6e>
	{
		address = CGRAM_index * 8;
    2378:	8e 81       	ldd	r24, Y+6	; 0x06
    237a:	88 2f       	mov	r24, r24
    237c:	90 e0       	ldi	r25, 0x00	; 0
    237e:	88 0f       	add	r24, r24
    2380:	99 1f       	adc	r25, r25
    2382:	88 0f       	add	r24, r24
    2384:	99 1f       	adc	r25, r25
    2386:	88 0f       	add	r24, r24
    2388:	99 1f       	adc	r25, r25
    238a:	8b 83       	std	Y+3, r24	; 0x03
		address = SET_BIT(address,6);
    238c:	8b 81       	ldd	r24, Y+3	; 0x03
    238e:	80 64       	ori	r24, 0x40	; 64
    2390:	8b 83       	std	Y+3, r24	; 0x03
		address = CLR_BIT(address,7);
    2392:	8b 81       	ldd	r24, Y+3	; 0x03
    2394:	8f 77       	andi	r24, 0x7F	; 127
    2396:	8b 83       	std	Y+3, r24	; 0x03
		LCD_CMD(address);
    2398:	8b 81       	ldd	r24, Y+3	; 0x03
    239a:	0e 94 77 0d 	call	0x1aee	; 0x1aee <LCD_CMD>
		for(int i=0; i<8 ;i++)
    239e:	1a 82       	std	Y+2, r1	; 0x02
    23a0:	19 82       	std	Y+1, r1	; 0x01
    23a2:	0f c0       	rjmp	.+30     	; 0x23c2 <LCD_Pattern+0x64>
		{
			LCD_Data(pattern[i]);
    23a4:	29 81       	ldd	r18, Y+1	; 0x01
    23a6:	3a 81       	ldd	r19, Y+2	; 0x02
    23a8:	8c 81       	ldd	r24, Y+4	; 0x04
    23aa:	9d 81       	ldd	r25, Y+5	; 0x05
    23ac:	fc 01       	movw	r30, r24
    23ae:	e2 0f       	add	r30, r18
    23b0:	f3 1f       	adc	r31, r19
    23b2:	80 81       	ld	r24, Z
    23b4:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <LCD_Data>
	{
		address = CGRAM_index * 8;
		address = SET_BIT(address,6);
		address = CLR_BIT(address,7);
		LCD_CMD(address);
		for(int i=0; i<8 ;i++)
    23b8:	89 81       	ldd	r24, Y+1	; 0x01
    23ba:	9a 81       	ldd	r25, Y+2	; 0x02
    23bc:	01 96       	adiw	r24, 0x01	; 1
    23be:	9a 83       	std	Y+2, r25	; 0x02
    23c0:	89 83       	std	Y+1, r24	; 0x01
    23c2:	89 81       	ldd	r24, Y+1	; 0x01
    23c4:	9a 81       	ldd	r25, Y+2	; 0x02
    23c6:	88 30       	cpi	r24, 0x08	; 8
    23c8:	91 05       	cpc	r25, r1
    23ca:	64 f3       	brlt	.-40     	; 0x23a4 <LCD_Pattern+0x46>
		{
			LCD_Data(pattern[i]);
		}
	}
	LCD_CMD(LCD_RETURN_HOME);
    23cc:	82 e0       	ldi	r24, 0x02	; 2
    23ce:	0e 94 77 0d 	call	0x1aee	; 0x1aee <LCD_CMD>
}
    23d2:	26 96       	adiw	r28, 0x06	; 6
    23d4:	0f b6       	in	r0, 0x3f	; 63
    23d6:	f8 94       	cli
    23d8:	de bf       	out	0x3e, r29	; 62
    23da:	0f be       	out	0x3f, r0	; 63
    23dc:	cd bf       	out	0x3d, r28	; 61
    23de:	cf 91       	pop	r28
    23e0:	df 91       	pop	r29
    23e2:	08 95       	ret

000023e4 <LCD_DisplayPattern>:

void LCD_DisplayPattern(u8 CGRAM_index,u8 ROW, u8 Col )
{
    23e4:	df 93       	push	r29
    23e6:	cf 93       	push	r28
    23e8:	00 d0       	rcall	.+0      	; 0x23ea <LCD_DisplayPattern+0x6>
    23ea:	0f 92       	push	r0
    23ec:	cd b7       	in	r28, 0x3d	; 61
    23ee:	de b7       	in	r29, 0x3e	; 62
    23f0:	89 83       	std	Y+1, r24	; 0x01
    23f2:	6a 83       	std	Y+2, r22	; 0x02
    23f4:	4b 83       	std	Y+3, r20	; 0x03
	LCD_Goto(ROW,Col);
    23f6:	8a 81       	ldd	r24, Y+2	; 0x02
    23f8:	6b 81       	ldd	r22, Y+3	; 0x03
    23fa:	0e 94 85 11 	call	0x230a	; 0x230a <LCD_Goto>
	LCD_Data(CGRAM_index);
    23fe:	89 81       	ldd	r24, Y+1	; 0x01
    2400:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <LCD_Data>
}
    2404:	0f 90       	pop	r0
    2406:	0f 90       	pop	r0
    2408:	0f 90       	pop	r0
    240a:	cf 91       	pop	r28
    240c:	df 91       	pop	r29
    240e:	08 95       	ret

00002410 <Keypad_init>:
						{'4','5','6','*'},
						{'1','2','3','-'},
						{'c','0','=','+'}};

void Keypad_init()
{
    2410:	df 93       	push	r29
    2412:	cf 93       	push	r28
    2414:	cd b7       	in	r28, 0x3d	; 61
    2416:	de b7       	in	r29, 0x3e	; 62
	/***************init col pins**************/
	DIO_setPinDir(Keypad_PORT, Col1, output);
    2418:	83 e0       	ldi	r24, 0x03	; 3
    241a:	60 e0       	ldi	r22, 0x00	; 0
    241c:	41 e0       	ldi	r20, 0x01	; 1
    241e:	0e 94 5e 06 	call	0xcbc	; 0xcbc <DIO_setPinDir>
	DIO_setPinDir(Keypad_PORT, Col2, output);
    2422:	83 e0       	ldi	r24, 0x03	; 3
    2424:	61 e0       	ldi	r22, 0x01	; 1
    2426:	41 e0       	ldi	r20, 0x01	; 1
    2428:	0e 94 5e 06 	call	0xcbc	; 0xcbc <DIO_setPinDir>
	DIO_setPinDir(Keypad_PORT, Col3, output);
    242c:	83 e0       	ldi	r24, 0x03	; 3
    242e:	62 e0       	ldi	r22, 0x02	; 2
    2430:	41 e0       	ldi	r20, 0x01	; 1
    2432:	0e 94 5e 06 	call	0xcbc	; 0xcbc <DIO_setPinDir>
	DIO_setPinDir(Keypad_PORT, Col4, output);
    2436:	83 e0       	ldi	r24, 0x03	; 3
    2438:	63 e0       	ldi	r22, 0x03	; 3
    243a:	41 e0       	ldi	r20, 0x01	; 1
    243c:	0e 94 5e 06 	call	0xcbc	; 0xcbc <DIO_setPinDir>

	DIO_setPinval(Keypad_PORT, Col1, HIGH);
    2440:	83 e0       	ldi	r24, 0x03	; 3
    2442:	60 e0       	ldi	r22, 0x00	; 0
    2444:	41 e0       	ldi	r20, 0x01	; 1
    2446:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <DIO_setPinval>
	DIO_setPinval(Keypad_PORT, Col2, HIGH);
    244a:	83 e0       	ldi	r24, 0x03	; 3
    244c:	61 e0       	ldi	r22, 0x01	; 1
    244e:	41 e0       	ldi	r20, 0x01	; 1
    2450:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <DIO_setPinval>
	DIO_setPinval(Keypad_PORT, Col3, HIGH);
    2454:	83 e0       	ldi	r24, 0x03	; 3
    2456:	62 e0       	ldi	r22, 0x02	; 2
    2458:	41 e0       	ldi	r20, 0x01	; 1
    245a:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <DIO_setPinval>
	DIO_setPinval(Keypad_PORT, Col4, HIGH);
    245e:	83 e0       	ldi	r24, 0x03	; 3
    2460:	63 e0       	ldi	r22, 0x03	; 3
    2462:	41 e0       	ldi	r20, 0x01	; 1
    2464:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <DIO_setPinval>

	/****************init row pins****************/
	DIO_pullup_PIN(Keypad_PORT, row1);
    2468:	83 e0       	ldi	r24, 0x03	; 3
    246a:	64 e0       	ldi	r22, 0x04	; 4
    246c:	0e 94 e5 08 	call	0x11ca	; 0x11ca <DIO_pullup_PIN>
	DIO_pullup_PIN(Keypad_PORT, row2);
    2470:	83 e0       	ldi	r24, 0x03	; 3
    2472:	65 e0       	ldi	r22, 0x05	; 5
    2474:	0e 94 e5 08 	call	0x11ca	; 0x11ca <DIO_pullup_PIN>
	DIO_pullup_PIN(Keypad_PORT, row3);
    2478:	83 e0       	ldi	r24, 0x03	; 3
    247a:	66 e0       	ldi	r22, 0x06	; 6
    247c:	0e 94 e5 08 	call	0x11ca	; 0x11ca <DIO_pullup_PIN>
	DIO_pullup_PIN(Keypad_PORT, row4);
    2480:	83 e0       	ldi	r24, 0x03	; 3
    2482:	67 e0       	ldi	r22, 0x07	; 7
    2484:	0e 94 e5 08 	call	0x11ca	; 0x11ca <DIO_pullup_PIN>
}
    2488:	cf 91       	pop	r28
    248a:	df 91       	pop	r29
    248c:	08 95       	ret

0000248e <Get_Key>:

u8 Get_Key()
{
    248e:	df 93       	push	r29
    2490:	cf 93       	push	r28
    2492:	cd b7       	in	r28, 0x3d	; 61
    2494:	de b7       	in	r29, 0x3e	; 62
    2496:	62 97       	sbiw	r28, 0x12	; 18
    2498:	0f b6       	in	r0, 0x3f	; 63
    249a:	f8 94       	cli
    249c:	de bf       	out	0x3e, r29	; 62
    249e:	0f be       	out	0x3f, r0	; 63
    24a0:	cd bf       	out	0x3d, r28	; 61
	u8 r;
	u8 c;
	u8 flag=0;
    24a2:	1f 86       	std	Y+15, r1	; 0x0f
	for(c=0;c<4;c++)
    24a4:	18 8a       	std	Y+16, r1	; 0x10
    24a6:	ae c0       	rjmp	.+348    	; 0x2604 <Get_Key+0x176>
	{
		DIO_setPinval(Keypad_PORT,c, LOW);
    24a8:	83 e0       	ldi	r24, 0x03	; 3
    24aa:	68 89       	ldd	r22, Y+16	; 0x10
    24ac:	40 e0       	ldi	r20, 0x00	; 0
    24ae:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <DIO_setPinval>
		for(r=4;r<8;r++)
    24b2:	84 e0       	ldi	r24, 0x04	; 4
    24b4:	89 8b       	std	Y+17, r24	; 0x11
    24b6:	9a c0       	rjmp	.+308    	; 0x25ec <Get_Key+0x15e>
		{
			if(PB_state(Keypad_PORT, c)==0)
    24b8:	83 e0       	ldi	r24, 0x03	; 3
    24ba:	68 89       	ldd	r22, Y+16	; 0x10
    24bc:	0e 94 86 0a 	call	0x150c	; 0x150c <PB_state>
    24c0:	88 23       	and	r24, r24
    24c2:	09 f0       	breq	.+2      	; 0x24c6 <Get_Key+0x38>
    24c4:	8e c0       	rjmp	.+284    	; 0x25e2 <Get_Key+0x154>
    24c6:	80 e0       	ldi	r24, 0x00	; 0
    24c8:	90 e0       	ldi	r25, 0x00	; 0
    24ca:	a0 ef       	ldi	r26, 0xF0	; 240
    24cc:	b1 e4       	ldi	r27, 0x41	; 65
    24ce:	8b 87       	std	Y+11, r24	; 0x0b
    24d0:	9c 87       	std	Y+12, r25	; 0x0c
    24d2:	ad 87       	std	Y+13, r26	; 0x0d
    24d4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24d6:	6b 85       	ldd	r22, Y+11	; 0x0b
    24d8:	7c 85       	ldd	r23, Y+12	; 0x0c
    24da:	8d 85       	ldd	r24, Y+13	; 0x0d
    24dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    24de:	20 e0       	ldi	r18, 0x00	; 0
    24e0:	30 e0       	ldi	r19, 0x00	; 0
    24e2:	4a e7       	ldi	r20, 0x7A	; 122
    24e4:	53 e4       	ldi	r21, 0x43	; 67
    24e6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    24ea:	dc 01       	movw	r26, r24
    24ec:	cb 01       	movw	r24, r22
    24ee:	8f 83       	std	Y+7, r24	; 0x07
    24f0:	98 87       	std	Y+8, r25	; 0x08
    24f2:	a9 87       	std	Y+9, r26	; 0x09
    24f4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    24f6:	6f 81       	ldd	r22, Y+7	; 0x07
    24f8:	78 85       	ldd	r23, Y+8	; 0x08
    24fa:	89 85       	ldd	r24, Y+9	; 0x09
    24fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    24fe:	20 e0       	ldi	r18, 0x00	; 0
    2500:	30 e0       	ldi	r19, 0x00	; 0
    2502:	40 e8       	ldi	r20, 0x80	; 128
    2504:	5f e3       	ldi	r21, 0x3F	; 63
    2506:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    250a:	88 23       	and	r24, r24
    250c:	2c f4       	brge	.+10     	; 0x2518 <Get_Key+0x8a>
		__ticks = 1;
    250e:	81 e0       	ldi	r24, 0x01	; 1
    2510:	90 e0       	ldi	r25, 0x00	; 0
    2512:	9e 83       	std	Y+6, r25	; 0x06
    2514:	8d 83       	std	Y+5, r24	; 0x05
    2516:	3f c0       	rjmp	.+126    	; 0x2596 <Get_Key+0x108>
	else if (__tmp > 65535)
    2518:	6f 81       	ldd	r22, Y+7	; 0x07
    251a:	78 85       	ldd	r23, Y+8	; 0x08
    251c:	89 85       	ldd	r24, Y+9	; 0x09
    251e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2520:	20 e0       	ldi	r18, 0x00	; 0
    2522:	3f ef       	ldi	r19, 0xFF	; 255
    2524:	4f e7       	ldi	r20, 0x7F	; 127
    2526:	57 e4       	ldi	r21, 0x47	; 71
    2528:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    252c:	18 16       	cp	r1, r24
    252e:	4c f5       	brge	.+82     	; 0x2582 <Get_Key+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2530:	6b 85       	ldd	r22, Y+11	; 0x0b
    2532:	7c 85       	ldd	r23, Y+12	; 0x0c
    2534:	8d 85       	ldd	r24, Y+13	; 0x0d
    2536:	9e 85       	ldd	r25, Y+14	; 0x0e
    2538:	20 e0       	ldi	r18, 0x00	; 0
    253a:	30 e0       	ldi	r19, 0x00	; 0
    253c:	40 e2       	ldi	r20, 0x20	; 32
    253e:	51 e4       	ldi	r21, 0x41	; 65
    2540:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2544:	dc 01       	movw	r26, r24
    2546:	cb 01       	movw	r24, r22
    2548:	bc 01       	movw	r22, r24
    254a:	cd 01       	movw	r24, r26
    254c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2550:	dc 01       	movw	r26, r24
    2552:	cb 01       	movw	r24, r22
    2554:	9e 83       	std	Y+6, r25	; 0x06
    2556:	8d 83       	std	Y+5, r24	; 0x05
    2558:	0f c0       	rjmp	.+30     	; 0x2578 <Get_Key+0xea>
    255a:	89 e1       	ldi	r24, 0x19	; 25
    255c:	90 e0       	ldi	r25, 0x00	; 0
    255e:	9c 83       	std	Y+4, r25	; 0x04
    2560:	8b 83       	std	Y+3, r24	; 0x03
    2562:	8b 81       	ldd	r24, Y+3	; 0x03
    2564:	9c 81       	ldd	r25, Y+4	; 0x04
    2566:	01 97       	sbiw	r24, 0x01	; 1
    2568:	f1 f7       	brne	.-4      	; 0x2566 <Get_Key+0xd8>
    256a:	9c 83       	std	Y+4, r25	; 0x04
    256c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    256e:	8d 81       	ldd	r24, Y+5	; 0x05
    2570:	9e 81       	ldd	r25, Y+6	; 0x06
    2572:	01 97       	sbiw	r24, 0x01	; 1
    2574:	9e 83       	std	Y+6, r25	; 0x06
    2576:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2578:	8d 81       	ldd	r24, Y+5	; 0x05
    257a:	9e 81       	ldd	r25, Y+6	; 0x06
    257c:	00 97       	sbiw	r24, 0x00	; 0
    257e:	69 f7       	brne	.-38     	; 0x255a <Get_Key+0xcc>
    2580:	14 c0       	rjmp	.+40     	; 0x25aa <Get_Key+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2582:	6f 81       	ldd	r22, Y+7	; 0x07
    2584:	78 85       	ldd	r23, Y+8	; 0x08
    2586:	89 85       	ldd	r24, Y+9	; 0x09
    2588:	9a 85       	ldd	r25, Y+10	; 0x0a
    258a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    258e:	dc 01       	movw	r26, r24
    2590:	cb 01       	movw	r24, r22
    2592:	9e 83       	std	Y+6, r25	; 0x06
    2594:	8d 83       	std	Y+5, r24	; 0x05
    2596:	8d 81       	ldd	r24, Y+5	; 0x05
    2598:	9e 81       	ldd	r25, Y+6	; 0x06
    259a:	9a 83       	std	Y+2, r25	; 0x02
    259c:	89 83       	std	Y+1, r24	; 0x01
    259e:	89 81       	ldd	r24, Y+1	; 0x01
    25a0:	9a 81       	ldd	r25, Y+2	; 0x02
    25a2:	01 97       	sbiw	r24, 0x01	; 1
    25a4:	f1 f7       	brne	.-4      	; 0x25a2 <Get_Key+0x114>
    25a6:	9a 83       	std	Y+2, r25	; 0x02
    25a8:	89 83       	std	Y+1, r24	; 0x01
			{
				_delay_ms(30);

				if(PB_state(Keypad_PORT, c)==0)
    25aa:	83 e0       	ldi	r24, 0x03	; 3
    25ac:	68 89       	ldd	r22, Y+16	; 0x10
    25ae:	0e 94 86 0a 	call	0x150c	; 0x150c <PB_state>
    25b2:	88 23       	and	r24, r24
    25b4:	c1 f4       	brne	.+48     	; 0x25e6 <Get_Key+0x158>
				{
					if(flag==0)
    25b6:	8f 85       	ldd	r24, Y+15	; 0x0f
    25b8:	88 23       	and	r24, r24
    25ba:	a9 f4       	brne	.+42     	; 0x25e6 <Get_Key+0x158>
					{
					return arr[r][c];
    25bc:	89 89       	ldd	r24, Y+17	; 0x11
    25be:	48 2f       	mov	r20, r24
    25c0:	50 e0       	ldi	r21, 0x00	; 0
    25c2:	88 89       	ldd	r24, Y+16	; 0x10
    25c4:	28 2f       	mov	r18, r24
    25c6:	30 e0       	ldi	r19, 0x00	; 0
    25c8:	ca 01       	movw	r24, r20
    25ca:	88 0f       	add	r24, r24
    25cc:	99 1f       	adc	r25, r25
    25ce:	88 0f       	add	r24, r24
    25d0:	99 1f       	adc	r25, r25
    25d2:	82 0f       	add	r24, r18
    25d4:	93 1f       	adc	r25, r19
    25d6:	fc 01       	movw	r30, r24
    25d8:	e8 59       	subi	r30, 0x98	; 152
    25da:	ff 4f       	sbci	r31, 0xFF	; 255
    25dc:	80 81       	ld	r24, Z
    25de:	8a 8b       	std	Y+18, r24	; 0x12
    25e0:	16 c0       	rjmp	.+44     	; 0x260e <Get_Key+0x180>
					}
				}
			}
			else
			{
				flag=1;
    25e2:	81 e0       	ldi	r24, 0x01	; 1
    25e4:	8f 87       	std	Y+15, r24	; 0x0f
	u8 c;
	u8 flag=0;
	for(c=0;c<4;c++)
	{
		DIO_setPinval(Keypad_PORT,c, LOW);
		for(r=4;r<8;r++)
    25e6:	89 89       	ldd	r24, Y+17	; 0x11
    25e8:	8f 5f       	subi	r24, 0xFF	; 255
    25ea:	89 8b       	std	Y+17, r24	; 0x11
    25ec:	89 89       	ldd	r24, Y+17	; 0x11
    25ee:	88 30       	cpi	r24, 0x08	; 8
    25f0:	08 f4       	brcc	.+2      	; 0x25f4 <Get_Key+0x166>
    25f2:	62 cf       	rjmp	.-316    	; 0x24b8 <Get_Key+0x2a>
			else
			{
				flag=1;
			}
		}
		DIO_setPinval(Keypad_PORT,c, HIGH);
    25f4:	83 e0       	ldi	r24, 0x03	; 3
    25f6:	68 89       	ldd	r22, Y+16	; 0x10
    25f8:	41 e0       	ldi	r20, 0x01	; 1
    25fa:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <DIO_setPinval>
u8 Get_Key()
{
	u8 r;
	u8 c;
	u8 flag=0;
	for(c=0;c<4;c++)
    25fe:	88 89       	ldd	r24, Y+16	; 0x10
    2600:	8f 5f       	subi	r24, 0xFF	; 255
    2602:	88 8b       	std	Y+16, r24	; 0x10
    2604:	88 89       	ldd	r24, Y+16	; 0x10
    2606:	84 30       	cpi	r24, 0x04	; 4
    2608:	08 f4       	brcc	.+2      	; 0x260c <Get_Key+0x17e>
    260a:	4e cf       	rjmp	.-356    	; 0x24a8 <Get_Key+0x1a>
				flag=1;
			}
		}
		DIO_setPinval(Keypad_PORT,c, HIGH);
	}
	return 0 ;
    260c:	1a 8a       	std	Y+18, r1	; 0x12
    260e:	8a 89       	ldd	r24, Y+18	; 0x12
}
    2610:	62 96       	adiw	r28, 0x12	; 18
    2612:	0f b6       	in	r0, 0x3f	; 63
    2614:	f8 94       	cli
    2616:	de bf       	out	0x3e, r29	; 62
    2618:	0f be       	out	0x3f, r0	; 63
    261a:	cd bf       	out	0x3d, r28	; 61
    261c:	cf 91       	pop	r28
    261e:	df 91       	pop	r29
    2620:	08 95       	ret

00002622 <BUZ_init>:
 *      Author: Abdelrahman
 */
#include "Buzzer_interface.h"

void BUZ_init(u8 PORTID,u8 PINID)
{
    2622:	df 93       	push	r29
    2624:	cf 93       	push	r28
    2626:	00 d0       	rcall	.+0      	; 0x2628 <BUZ_init+0x6>
    2628:	cd b7       	in	r28, 0x3d	; 61
    262a:	de b7       	in	r29, 0x3e	; 62
    262c:	89 83       	std	Y+1, r24	; 0x01
    262e:	6a 83       	std	Y+2, r22	; 0x02
	DIO_setPinDir(PORTID,PINID,output);
    2630:	89 81       	ldd	r24, Y+1	; 0x01
    2632:	6a 81       	ldd	r22, Y+2	; 0x02
    2634:	41 e0       	ldi	r20, 0x01	; 1
    2636:	0e 94 5e 06 	call	0xcbc	; 0xcbc <DIO_setPinDir>
}
    263a:	0f 90       	pop	r0
    263c:	0f 90       	pop	r0
    263e:	cf 91       	pop	r28
    2640:	df 91       	pop	r29
    2642:	08 95       	ret

00002644 <BUZ_on>:

void BUZ_on(u8 PORTID,u8 PINID)
{
    2644:	df 93       	push	r29
    2646:	cf 93       	push	r28
    2648:	00 d0       	rcall	.+0      	; 0x264a <BUZ_on+0x6>
    264a:	cd b7       	in	r28, 0x3d	; 61
    264c:	de b7       	in	r29, 0x3e	; 62
    264e:	89 83       	std	Y+1, r24	; 0x01
    2650:	6a 83       	std	Y+2, r22	; 0x02
	DIO_setPinval(PORTID,PINID,HIGH);
    2652:	89 81       	ldd	r24, Y+1	; 0x01
    2654:	6a 81       	ldd	r22, Y+2	; 0x02
    2656:	41 e0       	ldi	r20, 0x01	; 1
    2658:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <DIO_setPinval>
}
    265c:	0f 90       	pop	r0
    265e:	0f 90       	pop	r0
    2660:	cf 91       	pop	r28
    2662:	df 91       	pop	r29
    2664:	08 95       	ret

00002666 <BUZ_off>:

void BUZ_off(u8 PORTID,u8 PINID)
{
    2666:	df 93       	push	r29
    2668:	cf 93       	push	r28
    266a:	00 d0       	rcall	.+0      	; 0x266c <BUZ_off+0x6>
    266c:	cd b7       	in	r28, 0x3d	; 61
    266e:	de b7       	in	r29, 0x3e	; 62
    2670:	89 83       	std	Y+1, r24	; 0x01
    2672:	6a 83       	std	Y+2, r22	; 0x02
	DIO_setPinval(PORTID,PINID,LOW);
    2674:	89 81       	ldd	r24, Y+1	; 0x01
    2676:	6a 81       	ldd	r22, Y+2	; 0x02
    2678:	40 e0       	ldi	r20, 0x00	; 0
    267a:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <DIO_setPinval>
}
    267e:	0f 90       	pop	r0
    2680:	0f 90       	pop	r0
    2682:	cf 91       	pop	r28
    2684:	df 91       	pop	r29
    2686:	08 95       	ret

00002688 <main>:
 */
#include "HAL/HAL_LCD/LCD_interface.h"
#include<util/delay.h>

int main()
{
    2688:	df 93       	push	r29
    268a:	cf 93       	push	r28
    268c:	cd b7       	in	r28, 0x3d	; 61
    268e:	de b7       	in	r29, 0x3e	; 62
	LCD_init();
    2690:	0e 94 67 0b 	call	0x16ce	; 0x16ce <LCD_init>
    2694:	ff cf       	rjmp	.-2      	; 0x2694 <main+0xc>

00002696 <__udivmodsi4>:
    2696:	a1 e2       	ldi	r26, 0x21	; 33
    2698:	1a 2e       	mov	r1, r26
    269a:	aa 1b       	sub	r26, r26
    269c:	bb 1b       	sub	r27, r27
    269e:	fd 01       	movw	r30, r26
    26a0:	0d c0       	rjmp	.+26     	; 0x26bc <__udivmodsi4_ep>

000026a2 <__udivmodsi4_loop>:
    26a2:	aa 1f       	adc	r26, r26
    26a4:	bb 1f       	adc	r27, r27
    26a6:	ee 1f       	adc	r30, r30
    26a8:	ff 1f       	adc	r31, r31
    26aa:	a2 17       	cp	r26, r18
    26ac:	b3 07       	cpc	r27, r19
    26ae:	e4 07       	cpc	r30, r20
    26b0:	f5 07       	cpc	r31, r21
    26b2:	20 f0       	brcs	.+8      	; 0x26bc <__udivmodsi4_ep>
    26b4:	a2 1b       	sub	r26, r18
    26b6:	b3 0b       	sbc	r27, r19
    26b8:	e4 0b       	sbc	r30, r20
    26ba:	f5 0b       	sbc	r31, r21

000026bc <__udivmodsi4_ep>:
    26bc:	66 1f       	adc	r22, r22
    26be:	77 1f       	adc	r23, r23
    26c0:	88 1f       	adc	r24, r24
    26c2:	99 1f       	adc	r25, r25
    26c4:	1a 94       	dec	r1
    26c6:	69 f7       	brne	.-38     	; 0x26a2 <__udivmodsi4_loop>
    26c8:	60 95       	com	r22
    26ca:	70 95       	com	r23
    26cc:	80 95       	com	r24
    26ce:	90 95       	com	r25
    26d0:	9b 01       	movw	r18, r22
    26d2:	ac 01       	movw	r20, r24
    26d4:	bd 01       	movw	r22, r26
    26d6:	cf 01       	movw	r24, r30
    26d8:	08 95       	ret

000026da <__prologue_saves__>:
    26da:	2f 92       	push	r2
    26dc:	3f 92       	push	r3
    26de:	4f 92       	push	r4
    26e0:	5f 92       	push	r5
    26e2:	6f 92       	push	r6
    26e4:	7f 92       	push	r7
    26e6:	8f 92       	push	r8
    26e8:	9f 92       	push	r9
    26ea:	af 92       	push	r10
    26ec:	bf 92       	push	r11
    26ee:	cf 92       	push	r12
    26f0:	df 92       	push	r13
    26f2:	ef 92       	push	r14
    26f4:	ff 92       	push	r15
    26f6:	0f 93       	push	r16
    26f8:	1f 93       	push	r17
    26fa:	cf 93       	push	r28
    26fc:	df 93       	push	r29
    26fe:	cd b7       	in	r28, 0x3d	; 61
    2700:	de b7       	in	r29, 0x3e	; 62
    2702:	ca 1b       	sub	r28, r26
    2704:	db 0b       	sbc	r29, r27
    2706:	0f b6       	in	r0, 0x3f	; 63
    2708:	f8 94       	cli
    270a:	de bf       	out	0x3e, r29	; 62
    270c:	0f be       	out	0x3f, r0	; 63
    270e:	cd bf       	out	0x3d, r28	; 61
    2710:	09 94       	ijmp

00002712 <__epilogue_restores__>:
    2712:	2a 88       	ldd	r2, Y+18	; 0x12
    2714:	39 88       	ldd	r3, Y+17	; 0x11
    2716:	48 88       	ldd	r4, Y+16	; 0x10
    2718:	5f 84       	ldd	r5, Y+15	; 0x0f
    271a:	6e 84       	ldd	r6, Y+14	; 0x0e
    271c:	7d 84       	ldd	r7, Y+13	; 0x0d
    271e:	8c 84       	ldd	r8, Y+12	; 0x0c
    2720:	9b 84       	ldd	r9, Y+11	; 0x0b
    2722:	aa 84       	ldd	r10, Y+10	; 0x0a
    2724:	b9 84       	ldd	r11, Y+9	; 0x09
    2726:	c8 84       	ldd	r12, Y+8	; 0x08
    2728:	df 80       	ldd	r13, Y+7	; 0x07
    272a:	ee 80       	ldd	r14, Y+6	; 0x06
    272c:	fd 80       	ldd	r15, Y+5	; 0x05
    272e:	0c 81       	ldd	r16, Y+4	; 0x04
    2730:	1b 81       	ldd	r17, Y+3	; 0x03
    2732:	aa 81       	ldd	r26, Y+2	; 0x02
    2734:	b9 81       	ldd	r27, Y+1	; 0x01
    2736:	ce 0f       	add	r28, r30
    2738:	d1 1d       	adc	r29, r1
    273a:	0f b6       	in	r0, 0x3f	; 63
    273c:	f8 94       	cli
    273e:	de bf       	out	0x3e, r29	; 62
    2740:	0f be       	out	0x3f, r0	; 63
    2742:	cd bf       	out	0x3d, r28	; 61
    2744:	ed 01       	movw	r28, r26
    2746:	08 95       	ret

00002748 <_exit>:
    2748:	f8 94       	cli

0000274a <__stop_program>:
    274a:	ff cf       	rjmp	.-2      	; 0x274a <__stop_program>
